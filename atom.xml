<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hexo of Tilly Vally @ GitHub]]></title>
  <subtitle><![CDATA[Tilly Vally's Blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-07-14T09:52:29.055Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Tilly Vally]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/07/14/Table%20Layout%20in%20CSS/"/>
    <id>http://yoursite.com/2016/07/14/Table Layout in CSS/</id>
    <published>2016-07-14T09:52:29.055Z</published>
    <updated>2016-07-14T09:52:29.055Z</updated>
    <content type="html"><![CDATA[<h1 id="Table_Formatting__u8868_u683C_u683C_u5F0F"><a href="#Table_Formatting__u8868_u683C_u683C_u5F0F" class="headerlink" title="Table Formatting  表格格式"></a>Table Formatting  表格格式</h1><p>表格中元素组装在一起的方式称为格式，与布局Layout不一样：布局只有在格式化完成后才开始。</p>
<h2 id="Visually_Arranging_a_Table"><a href="#Visually_Arranging_a_Table" class="headerlink" title="Visually Arranging a Table"></a>Visually Arranging a Table</h2><p>首先要理解CSS安排表格的方式: CSS 区别对待 table elements 和 internal table elements. 在CSS中,internal table elements 生成长方形盒子，包含content, padding, 和borders，但没有margins. 因此，不能定义margins以分离表格单元. 遵循CSS的浏览器会忽略这些对单元格、行或其他内部元素的margins设置(有一个例外是captions）。</p>
<p>表格的组装有6个规则，规则的基础是单元格（grids）， 如下图中虚线标示出的长方形区域所示.</p>
<p><img src="/./img/OReilly.Table.Layout.in.CSS.CSS.Table.Rendering.in.Detail 1.jpg" alt="Figure 1. Grid cells form the basis of table layout"></p>
<p>在左边这个2x2表格里，单元格（grids）对应表格的单元(table cells)。右边这个更复杂的表格，它的某些cell跨越了多个格（grid）。但表格的边线仍然与格的边线对齐。 这些单元格是理论上的构件，不能通过Document Object Model (DOM)访问，只用于说明表格是如何组装的。</p>
<h2 id="Table_arrangement_rules"><a href="#Table_arrangement_rules" class="headerlink" title="Table arrangement rules"></a>Table arrangement rules</h2><ol>
<li>每一行只包含单行的格。表格中的所有行，依据其在源文档中的生成顺序从上到下填充表格(table-header 和 table-footer 行例外). 因此，表格有多少行(e.g., tr elements)就包含多少grid行.</li>
<li>行分组包含所有行对应的同样多的grid行.</li>
<li>列包含一个或多个格列。列按生成顺序一个挨一放置。 对于从左向右的语言，第一列在最左边，从右向左的语言，第一列在最右边.</li>
<li>列分组包含所有列对应的同样多的格列。</li>
<li>虽然表格单元可跨越多行或多列，CSS并不定义如果实现路跨越。这个任务由document language完成。每个跨越的单元是一个或多个格长宽的盒子。这个跨越的长方形区域的最上面的行，在跨越格的父元素行中. 单元的长方形应尽可能的靠左（从左向右的语言）, 但不与其他单元盒子重叠。 它也必须在所有早于其生成的同行元素的右边(从左向右语言)。在从右向左语言中，一个跨越的单元必须尽可能靠右，与其他盒子不重叠，必须在所有早于其生成的同行元素的左边。</li>
<li>单元盒子不能扩展至超过表格的最后一行盒子或行分组。如果表格的结构导致这种情况发生，单元必须缩短以使表格或行分组能完整的包含它。</li>
</ol>
<ul>
<li>CSS标准不鼓励，但并不禁止表格单元和其他内部元素的放置。例如，如果删除一个跨越行,会急剧改变表格的布局, 导致删除不想操作的其它行. 虽然如此，在现代浏览器中是可以布置表格元素的。*</li>
</ul>
<p>单元格定义为长方形， 但并不是同样大小。同一列的单元格宽度一样，同一行的单元格高度一样，但行之间的高度可以不一样。 同样，列之间的宽度也可以不一样。</p>
<h2 id="Table_Display_Values"><a href="#Table_Display_Values" class="headerlink" title="Table Display Values"></a>Table Display Values</h2><p>在HTML里，很容易知道哪个元素属于表格，<code>tr</code>和<code>td</code>是浏览器自已支持的。在XML中, 没有方法能内在支持识别表格元素。下表是<code>display</code>值的集合：</p>
<pre><code>                                display
       Values:      none | inline | block | inline-block | list-item | run-in | table |
                    inline-table | table-row-group | table-header-group | tablefooter-
                    group | table-row | table-column-group | table-column |
                    table-cell | table-caption | inherit
Initial value:      inline
   Applies to:      All elements
    Inherited:      No
Computed value:     Varies for floated, positioned, and root elements (see CSS2.1, section 9.7); otherwise, as specified
        Note:       `compact`和`marker`在 CSS2 中提出, 由于缺乏广泛支持从CSS2.1删除.
</code></pre><p>表格相关的值总结如下：</p>
<ul>
<li>table：定义元素是块级别的表格。这个值定义一个长方形的块。对应的HTML元素也是<code>table</code>。</li>
<li>inline-table：定义元素是行内联级别的表格。即元素定义了一个生成行内嵌盒子的长方形区域。与这最相似的是<code>inline-block</code>。与之最接近的HTML元素是<code>table</code>，尽管，默认的HTML表格不是内联的.</li>
<li>table-row：定义元素是表格行。对应的HTML元素是<code>tr</code>。</li>
<li>table-row-group：定义元素是一个或多个表格行。对应的HTML值是<code>tbody</code>。</li>
<li>table-header-group：与<code>table-row-group</code>非常像，除了格式化展示方面。表头行组总是在其他行和行组之前，在任何顶部标题之后显示。在打印过程中，如果表格需要多页，每页都会重复表头。这个值并不限定如何处理表头被分配给多个元素时的情况。表头组可包含多行，对应的HTML元素为<code>thead</code>。</li>
<li>table-footer-group： 与<code>table-header-group</code>很像, 除了脚注行组总是在其它行和行组之后，在任何每页底部标题之前显示。在打印过程中，如果表格需要多页，每页都会输出脚注行组。这个值并不限定如何处理脚注组被分配给多个元素时的情况。表头组可包含多行，对应的HTML元素为<code>tfoot</code>。</li>
<li>table-column：定义元素是一列表格列。在CSS术语里，带有这个<code>display</code>值的元素不是可见的，好像它们的值是<code>none</code>。它们的存在大部分是用于帮助定义列元素的展示。对应的HTML元素是<code>col</code>。</li>
<li>table-column-group：定义元素是一个或多个列。与<code>tablecolumn</code>相似，它也不被渲染，只有助于列组内元素的展示。对应的HTML元素为<code>colgroup</code>。</li>
<li>table-cell：定义元素是一个表格单元。对应的HTML元素是<code>th</code>和<code>td</code>。</li>
<li>table-caption：定义元素是一个表格标题。CSS不限定如何处理多个元素拥有值<code>caption</code>，但确实警告不要在表格或内联表格存在多个有<code>display: caption</code>的元素。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Table_Formatting__u8868_u683C_u683C_u5F0F"><a href="#Table_Formatting__u8868_u683C_u683C_u5F0F" class="headerlink" title="Table Form]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/07/14/Exam%20Analysis/"/>
    <id>http://yoursite.com/2016/07/14/Exam Analysis/</id>
    <published>2016-07-14T07:22:18.212Z</published>
    <updated>2016-07-14T07:22:18.212Z</updated>
    <content type="html"><![CDATA[<h1 id="EXAM_u7A0B_u5E8F_u5206_u6790"><a href="#EXAM_u7A0B_u5E8F_u5206_u6790" class="headerlink" title="EXAM程序分析"></a>EXAM程序分析</h1><h2 id="u5DE6_u8FB9_u6ED1_u52A8Menu"><a href="#u5DE6_u8FB9_u6ED1_u52A8Menu" class="headerlink" title="左边滑动Menu"></a>左边滑动Menu</h2><h3 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h3><ul>
<li><p>main.jsp: 加载创建左边菜单</p>
  <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;ctx&#125;/athrtyConfig.<span class="keyword">do</span>?<span class="keyword">method</span>=getMenuTree</span><br></pre></td></tr></table></figure>
</li>
<li><p>AthrtyController.java: 对应athrtyConfig.do, getMenuTree方法</p>
  <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">JSONArray</span> jSONArray = athrtyService.findUserAthrtyTree(<span class="built_in">map</span>);</span><br></pre></td></tr></table></figure>
<p>  <code>findUserAthrtyTree(map);</code>对应batis mapper中的映射关系</p>
</li>
<li><p>AthrtyMapper.xml: 对应java文件的数据查询<br>  <code>id</code>为<code>findUserAthrtyTree</code>对应查询用户树形Menu数据</p>
<p>  返回类型为athrtyResult:</p>
  <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">"athrtyResult"</span> <span class="keyword">type</span>=<span class="string">"com.admin.exam.business.domain.sys.AthrtyEntity"</span>&gt;</span><br><span class="line">    &lt;<span class="literal">result</span> property=<span class="string">"authId"</span> column=<span class="string">"AUTH_ID"</span> /&gt;</span><br><span class="line">    &lt;<span class="literal">result</span> property=<span class="string">"authName"</span> column=<span class="string">"AUTH_NAME"</span> /&gt;</span><br><span class="line">    &lt;<span class="literal">result</span> property=<span class="string">"disType"</span> column=<span class="string">"DIS_TYPE"</span> /&gt;</span><br><span class="line">    &lt;<span class="literal">result</span> property=<span class="string">"authDesc"</span> column=<span class="string">"AUTH_DESC"</span> /&gt;</span><br><span class="line">    &lt;<span class="literal">result</span> property=<span class="string">"authType"</span> column=<span class="string">"AUTH_TYPE"</span> /&gt;</span><br><span class="line">    &lt;<span class="literal">result</span> property=<span class="string">"pauthId"</span> column=<span class="string">"PAUTH_ID"</span> /&gt;</span><br><span class="line">    &lt;<span class="literal">result</span> property=<span class="string">"authUrl"</span> column=<span class="string">"AUTH_URL"</span> /&gt;</span><br><span class="line">    &lt;<span class="literal">result</span> property=<span class="string">"orderLevel"</span> column=<span class="string">"ORDER_LEVEL"</span> /&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure>
<p>  返回结果：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"系统管理"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"系统管理"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"A"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>,"<span class="attribute">state</span>":<span class="value"><span class="string">"open"</span></span>,"<span class="attribute">children</span>":<span class="value">[&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">101</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"用户管理"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">101</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"用户管理"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"mngUserInfo.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">102</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"角色管理"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">102</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"角色管理"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"roleConfig.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">103</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"权限管理"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">103</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"权限管理"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"athrtyConfig.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;]</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"考试管理"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"考试管理"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"A"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>,"<span class="attribute">state</span>":<span class="value"><span class="string">"open"</span></span>,"<span class="attribute">children</span>":<span class="value">[&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">201</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"试题管理"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">201</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"试题管理"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"questionConfig.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">202</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"科目管理"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">202</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"科目管理"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"subjectConfig.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">203</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"考务管理"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">203</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"考务管理"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"examConfig.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;]</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"数据管理"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"数据管理"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"A"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>,"<span class="attribute">state</span>":<span class="value"><span class="string">"open"</span></span>,"<span class="attribute">children</span>":<span class="value">[&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">301</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"知识点配置"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">301</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"知识点配置"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"knowledgeConfig.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">302</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"岗位配置"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">302</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"岗位配置"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"postConfig.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">303</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"岗位科目配置"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">303</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"岗位科目配置"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"postSubjectConfig.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">304</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"考试等级配置"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">304</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"考试等级配置"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"ScoreConfig.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">4</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;]</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">4</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"统计分析"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">4</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"统计分析"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"A"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">4</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>,"<span class="attribute">state</span>":<span class="value"><span class="string">"open"</span></span>,"<span class="attribute">children</span>":<span class="value">[&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">401</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"知识点统计"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">401</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"知识点统计"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"stsKnowledge.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">4</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">402</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"考核统计"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">402</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"考核统计"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"stsExam.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">4</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">403</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"考试明细"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">403</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"考试明细"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"stsUserExamInfo.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">4</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;]</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">5</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"考试信息"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">5</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"考试信息"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"A"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">5</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>,"<span class="attribute">state</span>":<span class="value"><span class="string">"open"</span></span>,"<span class="attribute">children</span>":<span class="value">[&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">501</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"用户考试信息"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">501</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"用户考试信息"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"userExamInfo.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">5</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;,&#123;"<span class="attribute">id</span>":<span class="value"><span class="number">502</span></span>,"<span class="attribute">text</span>":<span class="value"><span class="string">"考试监控"</span></span>,"<span class="attribute">attributes</span>":<span class="value">&#123;"<span class="attribute">authDesc</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authId</span>":<span class="value"><span class="number">502</span></span>,"<span class="attribute">authName</span>":<span class="value"><span class="string">"考试监控"</span></span>,"<span class="attribute">authType</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">authUrl</span>":<span class="value"><span class="string">"ExamMonitor.do"</span></span>,"<span class="attribute">disType</span>":<span class="value"><span class="string">"C"</span></span>,"<span class="attribute">orderLevel</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">pauthId</span>":<span class="value"><span class="number">5</span></span>,"<span class="attribute">resId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">roleId</span>":<span class="value"><span class="number">0</span></span>,"<span class="attribute">userId</span>":<span class="value"><span class="string">""</span></span>&#125;</span>&#125;]</span>&#125;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据库表：MG_ATHRTY_INFO</p>
</li>
<li>SQL 操作<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">select</span> AUTH_ID,AUTH_NAME,DIS_TYPE,AUTH_DESC,AUTH_TYPE,PAUTH_ID,AUTH_URL,ORDER_LEVEL <span class="keyword">from</span> MG_ATHRTY_INFO <span class="keyword">where</span> </span><br><span class="line">    AUTH_ID <span class="keyword">in</span> (<span class="keyword">select</span> AUTH_ID <span class="keyword">from</span> MG_ROLE_ATHRTY <span class="keyword">where</span> ROLE_ID <span class="keyword">in</span> (<span class="keyword">select</span> ROLE_ID <span class="keyword">from</span> MG_USERROLE_REL <span class="keyword">where</span> USER_ID=#&#123;userId&#125;)) <span class="keyword">AND</span> <span class="keyword">substring</span>(AUTH_ID,<span class="number">1</span>,<span class="number">1</span>) &lt;![CDATA[ &lt;&gt; ]]&gt; <span class="number">6</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>组合条件:</p>
<ol>
<li><p><code>select ROLE_ID from MG_USERROLE_REL where USER_ID=#{userId}</code> :从<code>MG_USERROLE_REL</code>中选择被查询用户（userId）的角色ID（ROLE_ID）</p>
</li>
<li><p><code>select AUTH_ID from MG_ROLE_ATHRTY where ROLE_ID in</code>: 从<code>MG_ROLE_ATHRTY</code>中选择<code>ROLE_ID</code>在上面结果集中的<code>AUTH_ID</code></p>
</li>
<li><p>从<code>MG_ATHRTY_INFO</code>中选择 在上面结果集中的<code>AUTH_ID</code></p>
</li>
<li><p>并且<code>substring(AUTH_ID,1,1) != 6</code>: 函数SUBSTRING (expression,start,length), 过滤AUTH_ID为<code>60x</code>的普通用户菜单.</p>
</li>
</ol>
<h3 id="u6DFB_u52A0_u83DC_u5355_u9879_u6B65_u9AA4"><a href="#u6DFB_u52A0_u83DC_u5355_u9879_u6B65_u9AA4" class="headerlink" title="添加菜单项步骤"></a>添加菜单项步骤</h3><ol>
<li><p>MG_ATHRTY_INFO表中添加对应菜单项,AUTH_URL为调用的页面地址</p>
</li>
<li><p>MG_ROLE_ATHRTY中添加对应权限</p>
</li>
</ol>
<h2 id="u4E1A_u52A1_u6D41_u7A0B_u6DFB_u52A0"><a href="#u4E1A_u52A1_u6D41_u7A0B_u6DFB_u52A0" class="headerlink" title="业务流程添加"></a>业务流程添加</h2><p>如上,如果增加了一个新菜单项,该菜单项对应一个新业务页面,业务流程的添加步骤如下:</p>
<ol>
<li><p>新增jsp文件,用于前台页面</p>
</li>
<li><p>新增XxxController.java控制类<br>Xxx与上面的AUTH_URL中的数据对应,例如,如果URL为<code>xyzAbcdef.do</code>,那么控制类的文件名对应为<code>XyzAbcdefController.java</code>,注意控制类首字母要大写.<br>应<code>import</code>对应的Entity和Service文件.</p>
<p>在Controller文件中增加请求映射:</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">String <span class="title">management</span><span class="params">(ModelMap mMap, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"your_new_file_directory/xxxxxx"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样点击菜单项时,自动映射调用对应的jsp文件, 注意xxxxxx为不带后缀名的文件名.</p>
</li>
</ol>
<ol>
<li><p>新增XxxService.java服务类<br>规则与控制类相同.应<code>import</code>对应的Entity和Dao文件.</p>
</li>
<li><p>新增XxxMapper.xml映射文件<br>规则与控制类相同.</p>
</li>
<li><p>新增XxxEntity.java实体文件<br>规则与控制类相同. Entity文件设置私有属性及其对应的set和get接口方法.</p>
</li>
<li><p>新增XxxDao.java数据模型文件<br>规则与控制类相同. Dao与Mapper对应, 应<code>import</code>对应的Entity文件.</p>
</li>
</ol>
<h2 id="u6587_u4EF6_u8DEF_u5F84_u903B_u8F91"><a href="#u6587_u4EF6_u8DEF_u5F84_u903B_u8F91" class="headerlink" title="文件路径逻辑"></a>文件路径逻辑</h2><h3 id="java_u6587_u4EF6"><a href="#java_u6587_u4EF6" class="headerlink" title="java文件"></a>java文件</h3><ul>
<li>com.admin.exam.web.xxx : 控制类文件路径</li>
<li>com.admin.exam.business.service.xxx: 服务类文件路径</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="EXAM_u7A0B_u5E8F_u5206_u6790"><a href="#EXAM_u7A0B_u5E8F_u5206_u6790" class="headerlink" title="EXAM程序分析"></a>EXAM程序分析</h1><h2 id="u]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/06/27/JQuery%20EasyUI%20Sourece%20Code%20Analysis/"/>
    <id>http://yoursite.com/2016/06/27/JQuery EasyUI Sourece Code Analysis/</id>
    <published>2016-06-27T02:44:27.482Z</published>
    <updated>2016-06-27T02:44:27.482Z</updated>
    <content type="html"><![CDATA[<h1 id="JQuery_EasyUI_Sourece_Code_Analysis"><a href="#JQuery_EasyUI_Sourece_Code_Analysis" class="headerlink" title="JQuery EasyUI Sourece Code Analysis"></a>JQuery EasyUI Sourece Code Analysis</h1><p>jquery Easyui 1.3.2<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_576</span>(<span class="params">_577, _578</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> opts = $.data(_577, <span class="string">"datagrid"</span>).options;</span><br><span class="line">    <span class="keyword">if</span> (_578) &#123;</span><br><span class="line">        opts.queryParams = _578;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> _579 = $.extend(&#123;&#125;, opts.queryParams);</span><br><span class="line">    <span class="keyword">if</span> (opts.pagination) &#123;</span><br><span class="line">        $.extend(_579, &#123; page: opts.pageNumber, rows: opts.pageSize &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (opts.sortName) &#123;</span><br><span class="line">        $.extend(_579, &#123; sort: opts.sortName, order: opts.sortOrder &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (opts.onBeforeLoad.call(_577, _579) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $(_577).datagrid(<span class="string">"loading"</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        _57a();</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_57a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _57b = opts.loader.call(_577, _579, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(_577).datagrid(<span class="string">"loaded"</span>);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">            _4e5(_577, data);</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                _562(_577);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(_577).datagrid(<span class="string">"loaded"</span>);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">            opts.onLoadError.apply(_577, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (_57b == <span class="literal">false</span>) &#123;</span><br><span class="line">            $(_577).datagrid(<span class="string">"loaded"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.fn.datagrid = <span class="function"><span class="keyword">function</span>(<span class="params">_580, _581</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> _580 == <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $.fn.datagrid.methods[_580](<span class="keyword">this</span>, _581);</span><br><span class="line">    &#125;</span><br><span class="line">    _580 = _580 || &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _582 = $.data(<span class="keyword">this</span>, <span class="string">"datagrid"</span>);</span><br><span class="line">        <span class="keyword">var</span> opts;</span><br><span class="line">        <span class="keyword">if</span> (_582) &#123;</span><br><span class="line">            opts = $.extend(_582.options, _580);</span><br><span class="line">            _582.options = opts;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            opts = $.extend(&#123;&#125;, $.extend(&#123;&#125;, $.fn.datagrid.defaults, &#123; queryParams: &#123;&#125; &#125;), $.fn.datagrid.parseOptions(<span class="keyword">this</span>), _580);</span><br><span class="line">            $(<span class="keyword">this</span>).css(<span class="string">"width"</span>, <span class="string">""</span>).css(<span class="string">"height"</span>, <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">var</span> _583 = _485(<span class="keyword">this</span>, opts.rownumbers);</span><br><span class="line">            <span class="keyword">if</span> (!opts.columns) &#123;</span><br><span class="line">                opts.columns = _583.columns;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!opts.frozenColumns) &#123;</span><br><span class="line">                opts.frozenColumns = _583.frozenColumns;</span><br><span class="line">            &#125;</span><br><span class="line">            opts.columns = $.extend(<span class="literal">true</span>, [], opts.columns);</span><br><span class="line">            opts.frozenColumns = $.extend(<span class="literal">true</span>, [], opts.frozenColumns);</span><br><span class="line">            opts.view = $.extend(&#123;&#125;, opts.view);</span><br><span class="line">            $.data(<span class="keyword">this</span>, <span class="string">"datagrid"</span>, &#123; options: opts, panel: _583.panel, dc: _583.dc, selectedRows: [], checkedRows: [], data: &#123; total: <span class="number">0</span>, rows: [] &#125;, originalRows: [], updatedRows: [], insertedRows: [], deletedRows: [] &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        _494(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (opts.data) &#123;</span><br><span class="line">            _4e5(<span class="keyword">this</span>, opts.data);</span><br><span class="line">            _562(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> data = _490(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (data.total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                _4e5(<span class="keyword">this</span>, data);</span><br><span class="line">                _562(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        _463(<span class="keyword">this</span>);</span><br><span class="line">        _576(<span class="keyword">this</span>);</span><br><span class="line">        _4a4(<span class="keyword">this</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>jquery easyui 1.2.3<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">target, param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pnl = $.data(target, <span class="string">"datagrid"</span>).panel;</span><br><span class="line">    <span class="keyword">var</span> opts = $.data(target, <span class="string">"datagrid"</span>).options;</span><br><span class="line">    <span class="keyword">if</span> (param) &#123;</span><br><span class="line">        opts.queryParams = param;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!opts.url) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> queryObj = $.extend(&#123;&#125;, opts.queryParams);</span><br><span class="line">    <span class="keyword">if</span> (opts.pagination) &#123;</span><br><span class="line">        $.extend(queryObj, &#123; page: opts.pageNumber, rows: opts.pageSize &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (opts.sortName) &#123;</span><br><span class="line">        $.extend(queryObj, &#123; sort: opts.sortName, order: opts.sortOrder &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (opts.onBeforeLoad.call(target, queryObj) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $(target).datagrid(<span class="string">"loading"</span>);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        ajaxRequest();</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajaxRequest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: opts.method,</span><br><span class="line">            url: opts.url,</span><br><span class="line">            data: queryObj,</span><br><span class="line">            dataType: <span class="string">"json"</span>,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    $(target).datagrid(<span class="string">"loaded"</span>);</span><br><span class="line">                &#125;, <span class="number">0</span>);</span><br><span class="line">                parent.closeLoadinglayer();</span><br><span class="line">                loadData(target, data);</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    cacheRows(target);</span><br><span class="line">                &#125;, <span class="number">0</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    $(target).datagrid(<span class="string">"loaded"</span>);</span><br><span class="line">                &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (opts.onLoadError) &#123;</span><br><span class="line">                    opts.onLoadError.apply(target, <span class="built_in">arguments</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="JQuery_EasyUI_Sourece_Code_Analysis"><a href="#JQuery_EasyUI_Sourece_Code_Analysis" class="headerlink" title="JQuery EasyUI Sourece ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular]]></title>
    <link href="http://yoursite.com/2016/03/25/AngularJS/"/>
    <id>http://yoursite.com/2016/03/25/AngularJS/</id>
    <published>2016-03-25T12:44:48.000Z</published>
    <updated>2016-03-29T07:48:02.878Z</updated>
    <content type="html"><![CDATA[<h1 id="u542F_u52A8_u65B9_u5F0F"><a href="#u542F_u52A8_u65B9_u5F0F" class="headerlink" title="启动方式"></a>启动方式</h1><p>有两种启动方式:自动和手动.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// example-declarative/public/index.html</span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Declarative App<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-controller</span>=<span class="value">"BodyController"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">li</span> <span class="attribute">ng-repeat</span>=<span class="value">"animal in animals"</span>&gt;</span>&#123;&#123;animal&#125;&#125;<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angularjs/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">        <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line">        app.controller(<span class="string">'BodyController'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;</span><br><span class="line">            $scope.animals = [<span class="string">'cats'</span>, <span class="string">'dogs'</span>, <span class="string">'aardvarks'</span>, <span class="string">'hamsters'</span>, <span class="string">'squirrels'</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>ng-app</code> 指令被关联到页面<code>html</code>标签,当页面加载完成，Angular自动检查这个指令是否存在。如果存在，它引用的模块将作为应用的基础模块，即代表应用本身的模块。这个模块将自动被初始化，这时，应用已准备完成。</p>
<p>对大多数应用来说，Angular的自动启动过程已经足够用了。但在某些特定情况下，在更大程度上控制这一过程也很有用处。在这些情况下，需要手动初始化Angular的启动过程,如下例所示:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">8</span>-<span class="number">5.</span> 推迟Angular的启动过程,直到基于jQuery的初始化AJAX请求完成.</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="string">'url'</span>: <span class="string">'/api/data'</span>,</span><br><span class="line">    <span class="string">'type'</span>: <span class="string">'GET'</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    angular.bootstrap(<span class="built_in">document</span>, [<span class="string">'app'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在这个例子中,Angular的启动过程推迟至一个初始AJAX请求完成后,只有在这个时候,才调用Angular的<code>bootstrap()</code>方法,传递DOM对象作为应用的容器(即“root element”),object to serve as a container for our application<br>(its ), 传递作为依赖的一个数组指定了一个名为<code>app</code>的模块(这个模块代表应用).</p>
<p>注意:大多数时候, 一个页面内只有一个Angular应用.但多个Angular应用可以共存在一个页面内.这时候,只有一个Angular应用可以自动启动,其它的要手动启动.</p>
<h1 id="Directives_3A_DOM_u7684_u62BD_u8C61_u5C42"><a href="#Directives_3A_DOM_u7684_u62BD_u8C61_u5C42" class="headerlink" title="Directives: DOM的抽象层"></a>Directives: DOM的抽象层</h1><p>Angular directives可被当作DOM的抽象层, 为开发人员提供一种机制,以创建复杂的WEB组件,这些组件可通过简单的HTML标记调用. Listing 8-7是一个帮助理解这一概念的例子.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Listing 8-7. Example Demonstrating the Creation of a Simple Angular Directive</span><br><span class="line">// example-directive1/public/index.html</span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Example Directive<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/bower_components/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">news-list</span>&gt;</span><span class="tag">&lt;/<span class="title">news-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angularjs/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line">    app.directive(<span class="string">'newsList'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'restrict'</span>: <span class="string">'E'</span>,</span><br><span class="line">            <span class="string">'replace'</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">'templateUrl'</span>: <span class="string">'/templates/news-list.html'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在应用模块创建之后，通过调用应用模块的<code>directive()</code>方法，为Angular定义了一个新的指令：名称和负责返回对象的工厂函数。工厂函数返回的对象通常有要定义的选项, 在这个简单的例子中是三项：</p>
<ul>
<li>restrict: 限定这个指令是否与Angular找到的<code>attributes (A)</code>, <code>classes (C)</code>, 或<code>DOM elements (E)</code>（或者是这些项的任意组合）匹配，在这个例子中，值<code>E</code>限定Angular只将指令与标签名匹配的DOM元素配对。定义全部三种只需要传递<code>AEC</code>.</li>
<li>replace: <code>true</code>表明组件应完全代替配对的DOM元素。<code>false</code>允许创建以某种方式对已有元素进行简单扩展的指令，而不是完全代替。</li>
<li>templateUrl: Angular在这个URL找到的标记将代表我们的指令，一旦它被插入到DOM中。也可以用<code>template</code>选项直接传递模板的内容。</li>
</ul>
<p><strong>注意</strong> 在Angular中创建新指令使用camelCase命名方法，在HTML中引用时使用dash-delimited格式。这种区别是因为HTML标记不区分大小写。当Angular解析HTML时, 会自动解决这种命名方法上的差别。</p>
<h1 id="u4F5C_u7528_u57DF_u4E0E_u539F_u578B_u7EE7_u627F"><a href="#u4F5C_u7528_u57DF_u4E0E_u539F_u578B_u7EE7_u627F" class="headerlink" title="作用域与原型继承"></a>作用域与原型继承</h1><p>在Angular启动的过程中，首先会创建一个根对象<code>$rootScope</code>关联到应用的根元素。在后续的解析DOM的过程中（在Angular中这一过程称为编译），当遇到指令时，Angular创建新的对象，从其最近的祖先继承原型，并被分配给当前指令关联的DOM元素。Angular实际上为应用中的每个组件创建了一个沙盒，在Angular术语中称为“scope”。</p>
<h1 id="u4F7F_u7528Controllers_u64CD_u4F5CScope"><a href="#u4F7F_u7528Controllers_u64CD_u4F5CScope" class="headerlink" title="使用Controllers操作Scope"></a>使用Controllers操作Scope</h1><p>在Angular中，<code>controller</code>就是函数，唯一的作用是操作scope对象。Listing 8-9演示了如何通过给负责描述指令的对象添加controller属性以控制作用域对象。指令使用的模板内为Listing 8-10.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Listing 8-9. Extended Version of Listing 8-7 Example That Adds Custom Behavior to Our New Directive</span><br><span class="line">// example-directive2/public/index.html</span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Example Directive<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/bower_components/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">news-list</span>&gt;</span><span class="tag">&lt;/<span class="title">news-list</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angularjs/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">        <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line">        app.directive(<span class="string">'newsList'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">'restrict'</span>: <span class="string">'E'</span>,</span><br><span class="line">                <span class="string">'replace'</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">'controller'</span>: <span class="function"><span class="keyword">function</span><span class="params">($scope, $http)</span> </span>&#123;</span><br><span class="line">                    $http.<span class="keyword">get</span>(<span class="string">'/api/news'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">                        $scope.items = result.data;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'templateUrl'</span>: <span class="string">'/templates/news-list.html'</span></span><br><span class="line"></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Listing 8-10. Contents of Our Directive’s Template</span><br><span class="line">// example-directive2/public/templates/news-list.html</span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"col-xs-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-repeat</span>=<span class="value">"item in items"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"media"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"media-left"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">img</span> <span class="attribute">class</span>=<span class="value">"media-object"</span> <span class="attribute">ng-src</span>=<span class="value">"&#123;&#123;item.img&#125;&#125;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"media-body"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">h4</span> <span class="attribute">class</span>=<span class="value">"media-heading"</span> <span class="attribute">ng-bind</span>=<span class="value">"item.title"</span>&gt;</span><span class="tag">&lt;/<span class="title">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>controller函数接收两个参数：<code>$scope</code>和<code>$http</code>。</p>
<h1 id="u53CC_u5411_u6570_u636E_u7ED1_u5B9A"><a href="#u53CC_u5411_u6570_u636E_u7ED1_u5B9A" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h1><p>数据绑定是Angular的一项能力，将模板与JavaScript对象(例如一个作用域)进行关联, 使模板引用域内的属性，这样浏览器就可以对其进行渲染。<br><img src="/./img/Angular Data binding.png" alt="Alt text"></p>
<p>Angular还具有反向的绑定能力，即当视图发生变化时，指令对象的域随之更新(例如表单内的值发生变化)。<br><code>$http</code>返回一个数组，这个数组被分配给<code>$scope</code>对象。注意在<code>Listing 8-10</code>中<code>ng-repeat</code>的指令，这个Angular核心指令遍历数组，为数组的每个元素创建<code>&lt;div class=&quot;media&quot;&gt;...&lt;/div&gt;</code>，然后Angular内建的<code>ng-src</code>和<code>ng-bind</code>指令动态分配图片URLs和对应的文本内容。</p>
<h1 id="u901A_u8FC7_u670D_u52A1_u548C_u4F9D_u8D56_u6CE8_u5165_u5B9E_u73B0_u677E_u8026_u5408L"><a href="#u901A_u8FC7_u670D_u52A1_u548C_u4F9D_u8D56_u6CE8_u5165_u5B9E_u73B0_u677E_u8026_u5408L" class="headerlink" title="通过服务和依赖注入实现松耦合L"></a>通过服务和依赖注入实现松耦合L</h1><h2 id="u4F9D_u8D56_u6CE8_u5165"><a href="#u4F9D_u8D56_u6CE8_u5165" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>dependency injection是客户端侧框架世界内较新的概念, Angular对它的应用相应普遍.</p>
<p>首先看一下Listing 8-11, 这个例子是一个基本的Node.js应用，只有一个依赖。<code>fs</code>模块. 在此例中， 我们的模块通过<code>require()</code>方法引入<code>fs</code>模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">8</span>-<span class="number">11.</span> Node.js Application That Depends on the fs Module</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'~/data.txt'</span>, <span class="string">'utf8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, contents</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err);</span><br><span class="line">    <span class="built_in">console</span>.log(contents);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这个例子演示了一个很简单的概念：如果一个模块<em>需要</em>一个依赖组件，那么就直接引入它。<br>但依赖注入与这个概念相反。Listing 8-12演示了Angular中一个依赖注入的例子.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">8</span>-<span class="number">12.</span> Dependency Injection <span class="keyword">in</span> Action Within Angular</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line">app.controller(<span class="string">'myController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http</span>) </span>&#123;</span><br><span class="line">    $http.get(<span class="string">'/api/news'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>类似Angular这样实现了依赖注入的框架规定了一种通用模式, 模块可以通过中心控制点注册自己.换句话说, 当应用初始化时,模块有机会说:”这是我的名字,你可以在这里找到我”.在之后的程序执行过程中, 已加载模块可以引入这些依赖模块，方法是在其构造函数（或类）中将依赖模块作为参数，顺序不重要。再来看一下Listing 8-12.新的<code>app</code>模块被创建以代表应用，接着在应用模块中创建了名为<code>myController</code>的控制器，构造函数作为参数被传递以在创建新实例时调用。注意传递给控制器构造函数的实参<code>$http</code>; 这就是依赖注入工作的一个例子。控制器引用的<code>$http</code>依赖是Angular核心库中的模块。在应用启动阶段，Angular以服务的形式注册了这个模块。</p>
<p><strong>注意</strong> 按惯例，Angular提供的核心服务、APIs和属性以$为前缀. </p>
<h2 id="Thin_Controllers_and_Fat_Services"><a href="#Thin_Controllers_and_Fat_Services" class="headerlink" title="Thin Controllers and Fat Services"></a>Thin Controllers and Fat Services</h2><p>在Listing 8-9中,控制器创建一AJAX请求，返回了存储头条新闻的数组。但这个例子没有在应用中共享这些功能的方法。我们可以将这个获取头条新闻的逻辑进行抽象，创建一个可在应用重复使用的API。这样做的好处是可以改变URL。</p>
<p>Angular服务是实现这一目标的工具。服务是创建定义良好的接口的机制，可在应用中被共享和重用。当大量的Angular应用逻辑以这种方式组织后，控制器才能成为应该成为的那样：一个薄胶水层作为绑定作用域与服务，只对特定的视图起作用。</p>
<p>在Angular中, 有三大类服务类型:factories, services, and providers.</p>
<h2 id="Factories"><a href="#Factories" class="headerlink" title="Factories"></a>Factories</h2><p>Listing 8-13 基于Listing 8-9，将获取头条新闻的程序逻辑移动了一个工厂函数内。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Listing 8-13. Angular headlines Factory That Provides an API for Fetching News Headlines</span><br><span class="line">// example-directive3/public/index.html</span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Example Directive<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/bower_components/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">news-list</span>&gt;</span><span class="tag">&lt;/<span class="title">news-list</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angularjs/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">        <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line">        app.directive(<span class="string">'newsList'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'restrict'</span>: <span class="string">'E'</span>,</span><br><span class="line">            <span class="string">'replace'</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">'controller'</span>: <span class="function"><span class="keyword">function</span><span class="params">($scope, headlines)</span> </span>&#123;</span><br><span class="line">                headlines.fetch().then(<span class="function"><span class="keyword">function</span><span class="params">(items)</span> </span>&#123;</span><br><span class="line">                    $scope.items = items;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'templateUrl'</span>: <span class="string">'/templates/news-list.html'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    app.factory(<span class="string">'headlines'</span>, <span class="function"><span class="keyword">function</span><span class="params">($http)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'fetch'</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $http.<span class="keyword">get</span>(<span class="string">'/api/news'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> result.data;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>headlines</code>工厂返回一个带有<code>fetch()</code>方法的对象，当该方法被调用时，会查询新闻并以promise的形式返回.<br>在绝大多数Angular应用中，factories是最常使用的服务类型。当工厂第一次被作为依赖引用时，Angular调用工厂函数并返回结果给请求者。服务的后续引用将接收首次服务被引用时返回的同样的结果. 换句话说，工厂可被认为是单次实例,只被调用一次.</p>
<h2 id="Services"><a href="#Services" class="headerlink" title="Services"></a>Services</h2><p>Listing 8-14基于Listing 8-9,将获取新闻的程序逻辑移动到一个服务中.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Listing 8-14. Angular headlines Service That Provides an API for Fetching News Headlines</span><br><span class="line">// example-directive4/public/index.html</span><br><span class="line"></span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Example Directive<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/bower_components/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">news-list</span>&gt;</span><span class="tag">&lt;/<span class="title">news-list</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angularjs/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line">    app.directive(<span class="string">'newsList'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'restrict'</span>: <span class="string">'E'</span>,</span><br><span class="line">            <span class="string">'replace'</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">'controller'</span>: <span class="function"><span class="keyword">function</span><span class="params">($scope, headlines)</span> </span>&#123;</span><br><span class="line">                headlines.fetch().then(<span class="function"><span class="keyword">function</span><span class="params">(items)</span> </span>&#123;</span><br><span class="line">                    $scope.items = items;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'templateUrl'</span>: <span class="string">'/templates/news-list.html'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.service(<span class="string">'headlines'</span>, <span class="function"><span class="keyword">function</span><span class="params">($http)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fetch = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $http.<span class="keyword">get</span>(<span class="string">'/api/news'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> result.data;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在Angular中, services函数与factories几乎一样,只有一点关键区别。工厂函数可以简单调用，服务函数通过<code>new</code>关键字作为构造函数调用, 允许它们以类的形式定义并初始化.采用哪种方式更多地由风格偏好决定,最终结果都一样.<br>在这个例子中,与工厂函数返回一个对象相反,<code>fetch()</code>方法被分配给<code>this</code>, 即服务构造函数最终返回的对象.</p>
<h2 id="Providers"><a href="#Providers" class="headerlink" title="Providers"></a>Providers</h2><p>Listing 8-15基于Listing 8-9,将获取新闻的逻辑移动provider中.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Listing 8-15. Angular headlines Provider That Provides an API for Fetching News Headlines</span><br><span class="line">// example-directive5/public/index.html</span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Example Directive<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/bower_components/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">news-list</span>&gt;</span><span class="tag">&lt;/<span class="title">news-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angularjs/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, []);</span><br><span class="line">    app.directive(<span class="string">'newsList'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'restrict'</span>: <span class="string">'E'</span>,</span><br><span class="line">            <span class="string">'replace'</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">'controller'</span>: <span class="function"><span class="keyword">function</span><span class="params">($scope, headlines)</span> </span>&#123;</span><br><span class="line">                headlines.fetch().then(<span class="function"><span class="keyword">function</span><span class="params">(items)</span> </span>&#123;</span><br><span class="line">                    $scope.items = items;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'templateUrl'</span>: <span class="string">'/templates/news-list.html'</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.config(<span class="function"><span class="keyword">function</span><span class="params">(headlinesProvider)</span> </span>&#123;</span><br><span class="line">        headlinesProvider.limit = <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    app.provider(<span class="string">'headlines'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$<span class="keyword">get</span> = <span class="function"><span class="keyword">function</span><span class="params">($http)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="string">'fetch'</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> $http.<span class="keyword">get</span>(<span class="string">'/api/news'</span>, &#123;</span><br><span class="line">                        <span class="string">'params'</span>: &#123;</span><br><span class="line">                            <span class="string">'limit'</span>: self.limit || <span class="number">20</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">                       <span class="keyword">return</span> result.data;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>与factories和services不同, 它们对自己的设置完全负责,而Angular providers允许在其父模块配置阶段对其进行配置. 这种方式使providers可被当作可配置的工厂. 在这个例子中,定义了一个headlines provider,其功能与Listing 8-13中的工厂一致.只是这次,<code>fetch()</code>方法传递了一个可配置的<code>limit</code>参数,以限定获取新闻的条数. 在Listing 8-15中, providr中定义了一个工厂函数<code>this.$get</code>.当headlines provider被作为依赖引用时,Angular调用这个函数并返回结果, 与Listing 8-13中工厂函数很像. </p>
<h1 id="Creating_Routes"><a href="#Creating_Routes" class="headerlink" title="Creating Routes"></a>Creating Routes</h1><p>由Angular这类框架创建的所谓“single-page applications”，为用户提供了与传统桌面应用类似的体验。在单一的页面前期加载过程中，加载所有（或大部分）应用所需的不同资源。后续对不同URLs的请求被后台AJAX requests截取并处理,而不是请求刷新整个页面。Angular的<code>ngRoute</code>模块就是用于此用途。</p>
<p>Listing 8-16基于Listing 8-13. 但这次在应用中增加了两个routes，使用户可以被引导到标记为“Dashboard”和“News Headlines.” 只有在用户浏览到<code>/#/headlines</code> route，<code>newsList</code>指令才被插入到页面。实现步骤如下：</p>
<ol>
<li>定义配置模块，以在应用启动阶段执行。在这个函数中，引用由Angular的<code>angular-route</code>包提供的<code>$routeProvider</code> service，这个包必须与Angular的核心库一起安装.</li>
<li>定义数组<code>routes</code>, 数组元素是定义了不同路径的对象。在Listing 8-16中，每个对象的<code>route</code>属性定义了加载路径的位置, 而<code>config</code>属性允许定义一个控制器函数和模板，在合适的时间加载。</li>
<li>遍历<code>routes</code>数组的每个元素，为<code>$routeProvider</code> service的<code>when()</code>方法传递适当的属性。通过这种简单的方法，可以定义多个routes. 另一种不用数组的方式是，进行两次独立显示地<code>$routeProvider.when()</code>方法调用.</li>
<li>利用<code>$routeProvider.otherwise()</code>方法定义一个默认route，以在没有指定路径（或路径无效）的情况下加载。</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Listing 8-16. Angular Application That Defines Two Routes, dashboard and headlines</span><br><span class="line">// example-router1/public/index.html</span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Routing Example<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/bower_components/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="title">ng-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angularjs/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angular-route/angular-route.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/modules/news-list.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>, <span class="string">'newsList'</span>]);</span><br><span class="line">    app.config(<span class="function"><span class="keyword">function</span><span class="params">($routeProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> routes = [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'route'</span>: <span class="string">'/dashboard'</span>,</span><br><span class="line">                <span class="string">'config'</span>: &#123;</span><br><span class="line">                    <span class="string">'templateUrl'</span>: <span class="string">'/templates/dashboard.html'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'route'</span>: <span class="string">'/headlines'</span>,</span><br><span class="line">                <span class="string">'config'</span>: &#123;</span><br><span class="line">                    <span class="string">'controller'</span>: <span class="function"><span class="keyword">function</span><span class="params">($log)</span> </span>&#123;</span><br><span class="line">                        $log.debug(<span class="string">'Welcome to the headlines route.'</span>);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">'templateUrl'</span>: <span class="string">'/templates/headlines.html'</span></span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">        ];  </span><br><span class="line">        routes.forEach(<span class="function"><span class="keyword">function</span><span class="params">(route)</span> </span>&#123;</span><br><span class="line">            $routeProvider.when(route.route, route.config);</span><br><span class="line">        &#125;);</span><br><span class="line">        $routeProvider.otherwise(&#123;</span><br><span class="line">            <span class="string">'redirectTo'</span>: <span class="string">'/dashboard'</span> <span class="comment">// Our default route</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Route_Parameters"><a href="#Route_Parameters" class="headerlink" title="Route Parameters"></a>Route Parameters</h2><p>在实际应用中，大多数存在于Angular应用中的路径，提供基于一个或多个参数值而变化的动态内容. Listing 8-17演示了这一点是如何做到的。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Listing 8-17. Angular Application with Routes That Vary Their Content Based on the Value of an Expected</span><br><span class="line">Parameter</span><br><span class="line">// example-router2/public/index.html</span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Routing Example<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/bower_components/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="title">ng-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angularjs/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angular-route/angular-route.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>]);</span><br><span class="line">    app.config(<span class="function"><span class="keyword">function</span><span class="params">($routeProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> routes = [&#123;</span><br><span class="line">            <span class="string">'route'</span>: <span class="string">'/dashboard'</span>,</span><br><span class="line">            <span class="string">'config'</span>: &#123;</span><br><span class="line">                <span class="string">'templateUrl'</span>: <span class="string">'/templates/dashboard.html'</span>,</span><br><span class="line">                <span class="string">'controller'</span>: <span class="function"><span class="keyword">function</span><span class="params">($scope, $http)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> $http.<span class="keyword">get</span>(<span class="string">'/api/animals'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">                        $scope.animals = result.data;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'route'</span>: <span class="string">'/animals/:animalID'</span>,</span><br><span class="line">            <span class="string">'config'</span>: &#123;</span><br><span class="line">                <span class="string">'templateUrl'</span>: <span class="string">'/templates/animal.html'</span>,</span><br><span class="line">                <span class="string">'controller'</span>: <span class="function"><span class="keyword">function</span><span class="params">($scope, $route, $http)</span> </span>&#123;</span><br><span class="line">                    $http.<span class="keyword">get</span>(<span class="string">'/api/animals/'</span> + $route.current.params.animalID).</span><br><span class="line">                    then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">                       $scope.animal = result.data;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">        routes.forEach(<span class="function"><span class="keyword">function</span><span class="params">(route)</span> </span>&#123;</span><br><span class="line">            $routeProvider.when(route.route, route.config);</span><br><span class="line">        &#125;);</span><br><span class="line">        $routeProvider.otherwise(&#123;</span><br><span class="line">         <span class="string">'redirectTo'</span>: <span class="string">'/dashboard'</span> <span class="comment">// Our default route</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Route_Resolutions"><a href="#Route_Resolutions" class="headerlink" title="Route Resolutions"></a>Route Resolutions</h2><p>如果一切正常，单页面应用可为用户提供大幅改进的体验. 这种改进不是的白来的。在单页面应用生命周期内，协调不同的API调用是一项很难度的工作。<br>Angular的<code>ngRoute</code>模块可帮助改善这种复杂性：解析。</p>
<p>解析定义了在变换到一个特定路径前，必须执行的一个或多个步骤. 如果某个路径的全部resolutions都返回promises, 那么只有在所有promises都兑现的情况，路径变化才能完成。Listing 8-18 演示了路径解析是如何工作的.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Listing 8-18. Route Resolutions in Action</span><br><span class="line">// example-router3/public/index.html</span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Routing Example<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/style.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/bower_components/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="title">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="title">ng-view</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angularjs/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/bower_components/angular-route/angular-route.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>]);</span><br><span class="line">    app.config(<span class="function"><span class="keyword">function</span><span class="params">($routeProvider)</span> </span>&#123;</span><br><span class="line">        $routeProvider.when(<span class="string">'/dashboard'</span>, &#123;</span><br><span class="line">            <span class="string">'templateUrl'</span>: <span class="string">'/templates/dashboard.html'</span>,</span><br><span class="line">            <span class="string">'controller'</span>: <span class="function"><span class="keyword">function</span><span class="params">($scope, animals, colors)</span> </span>&#123;</span><br><span class="line">                $scope.animals = animals;</span><br><span class="line">                $scope.colors = colors;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'resolve'</span>: &#123;</span><br><span class="line">                <span class="string">'animals'</span>: <span class="function"><span class="keyword">function</span><span class="params">($http)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> $http.<span class="keyword">get</span>(<span class="string">'/api/animals'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> result.data;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">'colors'</span>: <span class="function"><span class="keyword">function</span><span class="params">($http)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> $http.<span class="keyword">get</span>(<span class="string">'/api/colors'</span>).then(<span class="function"><span class="keyword">function</span><span class="params">(result)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> result.data;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        $routeProvider.otherwise(&#123;</span><br><span class="line">            <span class="string">'redirectTo'</span>: <span class="string">'/dashboard'</span> <span class="comment">// Our default route</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在此例中，一个路径被定义为在调用相应的API获取信息后，显示动物清单和颜色. 这里没有直接在路径的控制器中请求信息，而是在路径的<code>resolve</code>对象中。相应地，当路径的控制器函数被调用后，可以确定请求已完成.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u542F_u52A8_u65B9_u5F0F"><a href="#u542F_u52A8_u65B9_u5F0F" class="headerlink" title="启动方式"></a>启动方式</h1><p>有两种启动方式:自动和手动.<br><figur]]>
    </summary>
    
      <category term="Angular" scheme="http://yoursite.com/tags/Angular/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[demystifying-javascript-closures-callbacks-iifes]]></title>
    <link href="http://yoursite.com/2016/03/23/demystifying-javascript-closures-callbacks-iifes/"/>
    <id>http://yoursite.com/2016/03/23/demystifying-javascript-closures-callbacks-iifes/</id>
    <published>2016-03-23T14:15:23.000Z</published>
    <updated>2016-03-24T02:39:38.976Z</updated>
    <content type="html"><![CDATA[<h1 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h1><p>在JavaScript中, 一个<code>closure</code>就是一个保留了对父作用域内变量引用的函数，即使其父函数已经返回。</p>
<p>这特别意味着任何函数都可以被当作闭包，因为函数可以引用或访问：</p>
<ul>
<li>其自身作用域内的任何变量和参数</li>
<li>其外部（父或包含）函数作用域内的变量和参数</li>
<li>全局域内的变量</li>
</ul>
<p>为了更好的理解闭包的概念，可将上面的定义分解为三个容易理解的要点：</p>
<p><strong>Point 1:</strong> <em>可以引用在当前函数外部定义的变量</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setLocation</span>(<span class="params">city</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> country = <span class="string">"France"</span>; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">printLocation</span>(<span class="params"></span>) </span>&#123;       </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"You are in "</span> + city + <span class="string">", "</span> + country);  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printLocation();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setLocation (<span class="string">"Paris"</span>);  <span class="comment">// output: You are in Paris, France</span></span><br></pre></td></tr></table></figure></p>
<p>在这样一段代码中，<code>printLocation()</code>函数引用了变量<code>country</code>和包含函数（父函数）<code>setLocation()</code>的参数<code>city</code>. </p>
<p><strong>Point 2:</strong> <em>内部函数可以引用在外部函数中定义的变量，即使外部函数已经返回</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setLocation</span>(<span class="params">city</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> country = <span class="string">"France"</span>; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">printLocation</span>(<span class="params"></span>) </span>&#123;       </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"You are in "</span> + city + <span class="string">", "</span> + country);  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> printLocation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentLocation = setLocation (<span class="string">"Paris"</span>);   </span><br><span class="line"></span><br><span class="line">currentLocation();   <span class="comment">// output: You are in Paris, France</span></span><br></pre></td></tr></table></figure></p>
<p>这个例子与第一个例子几乎完全一样，除了这一次<code>printLocation()</code>在外部函数<code>setLocation()</code>中被返回，而不是像之前那样被立即调用。因此，<code>currentLocation</code>的值是内部的<code>printLocation()</code>函数.</p>
<p>如果执行<code>alert(currentLocation);</code> 输出结果如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLocation</span> (<span class="params"></span>) </span>&#123;       </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"You are in "</span> + city + <span class="string">", "</span> + country);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>printLocation()</code> 在其词法作用域（静态作用域）外部执行。此时，<code>setLocation()</code>似乎已经消失了，但<code>printLocation()</code>仍然能访问并记住它的变量<code>(country)</code>和参数<code>(city)</code>.</p>
<p>闭包(内部函数)能记住它的包围作用域（外部函数），即使闭包在其词法作用域外部执行。因此，可以在后续的任何时间点调用闭包。</p>
<p><strong>Point 3:</strong> <em>内部函数存储对外部函数的变量的引用，而不是变量的值</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cityLocation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> city = <span class="string">"Paris"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(city); &#125;,  </span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newCity</span>) </span>&#123; city = newCity; &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myLocation = cityLocation();</span><br><span class="line"></span><br><span class="line">myLocation.get();           <span class="comment">// output: Paris</span></span><br><span class="line">myLocation.set(<span class="string">'Sydney'</span>);</span><br><span class="line">myLocation.get();           <span class="comment">// output: Sydney</span></span><br></pre></td></tr></table></figure></p>
<p>这里的<code>cityLocation()</code>返回一个对象，这个对象有两个闭包：<code>get()</code>和<code>set()</code>，都对外部变量<code>city</code>进行了引用. <code>get()</code>获取<code>city</code>的当前值, 而<code>set()</code>更新这个值。当第二次调用<code>myLocation.get()</code>时，输出<code>city</code>更新后（当前）的值“Sydney”，而不是默认的“Paris”.</p>
<p>因此，闭包可以读取并更新它们存储的变量，更新的结果对任何访问变量的闭包可见。这就是说，闭包存储的是外部变量的引用，而不是变量值的复本。这是需要牢记的一点，不清楚这一点会引起难以查觉的逻辑错误。</p>
<p>闭包的一个有趣特征是闭包中的变量自动被隐藏。闭包在其封闭的变量中存储数据，不能直接访问。唯一变更这些变量的方法是通过非直接方式访问变量。例如，在上面那个最后的例子里，通过使用闭包<code>get()</code>和<code>set()</code>转弯抹角地对变量<code>city</code>进行修改。</p>
<p>这种行为上的特点可被用来在对象中存储私有数据。与把数据作为对象属性相反，可将数据存储为构造函数中的变量，使用闭包作为方法引用这些变量。</p>
<h1 id="Callbacks"><a href="#Callbacks" class="headerlink" title="Callbacks"></a>Callbacks</h1><p>在JavaScript中, 函数是头等对象. 后果之一是，函数可被当作实参传递给其它函数，也可以被其它函数返回。</p>
<p>一个函数被称为高阶函数，如果它以其它函数为实参，或者将其它函数作为结果返回。被作为实参传递的函数称为回调函数。</p>
<p>回调函数有许多常见应用场景，例如浏览器的<code>window</code>对象的<code>setTimeout()</code>和<code>setInterval()</code>方法，接收并执行回调：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMessage</span>(<span class="params">message</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(message);</span><br><span class="line">  &#125;, <span class="number">3000</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showMessage(<span class="string">'Function called 3 seconds ago'</span>);</span><br></pre></td></tr></table></figure></p>
<p>另一个例子是对页面上的元素添加一个事件监听器。实际上就是提供了当事件发生时被调用的一个回调函数指针.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// HTML</span><br><span class="line"></span><br><span class="line">&amp;lt;button id='btn'&amp;gt;Click me&amp;lt;/button&amp;gt;</span><br><span class="line"></span><br><span class="line">// JavaScript</span><br><span class="line"></span><br><span class="line">function showMessage()&#123;</span><br><span class="line">  alert('Woohoo!');</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var el = document.getElementById("btn");</span><br><span class="line">el.addEventListener("click", showMessage);</span><br></pre></td></tr></table></figure></p>
<p>理解高阶函数和回调函数的最好方法是自己写一个：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fullName</span>(<span class="params">firstName, lastName, callback</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"My name is "</span> + firstName + <span class="string">" "</span> + lastName);</span><br><span class="line">  callback(lastName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> greeting = <span class="function"><span class="keyword">function</span>(<span class="params">ln</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome Mr. '</span> + ln);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fullName(<span class="string">"Jackie"</span>, <span class="string">"Chan"</span>, greeting);</span><br></pre></td></tr></table></figure></p>
<p><code>fullName()</code>函数有三个实参 - 最后一个是回调函数. 在<code>console.log()</code>之后，对这个传入的实参回调函数’callback()’进行了触发，也就是在<code>fullName()</code>之后定义的<code>greeting()</code>函数。最后，对<code>fullName()</code>进行调用, <code>greeting()</code>作为变量传递（没有括号），因为并不想让它立即执行，而只是想为<code>fullName()</code>指明后面要调用的是它。</p>
<p>传递回调函数的定义，而不是函数调用。这样可以防止回调函数立即执行，这种方式并不是回调函数的设计初衷。 当回调函数的定义被传递后，可以在任何时间和包含函数任何一点执行。而且，回调函数的行为看起来好像它是在高阶函数内部, 因此它实际上是闭包：它可以访问包含函数的变量和参数，甚至全局变量。</p>
<p>回调可以是前例中那样的已存在的函数，也可以是下面这个例子中这样的匿名函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fullName</span>(<span class="params">firstName, lastName, callback</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"My name is "</span> + firstName + <span class="string">" "</span> + lastName);</span><br><span class="line">  callback(lastName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fullName(<span class="string">"Jackie"</span>, <span class="string">"Chan"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ln</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'Welcome Mr. '</span> + ln);&#125;);</span><br></pre></td></tr></table></figure></p>
<p>回调函数在JavaScript库中的使用很普遍，以提供通用性和可重用度。回调函数可很容易地定制和（或）扩展库方法. 而且，代码易于维护，更精炼，可读性更强。当需要把不必要的重复代码变换为更抽象和更通用的函数时，回调函数就能发挥作用。</p>
<p>例如，假定需要两个函数：一个打印已出版文章的信息，另一个打印已发送消息的信息。当创建这两个函数时会发现，其中有重复的逻辑，在不同的地方有同样的代码是没必要的，解决方法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params">item, author, callback</span>)</span>&#123;   <span class="comment">// Generic function with common data</span></span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">  <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">  callback(author, date);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messages</span>(<span class="params">author, time</span>)</span>&#123;   <span class="comment">// Callback function with specific data</span></span><br><span class="line">  <span class="keyword">var</span> sendTime = time.toLocaleTimeString();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Sent from "</span> + author + <span class="string">" at "</span> + sendTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">articles</span>(<span class="params">author, date</span>)</span>&#123;   <span class="comment">// Callback function with specific data</span></span><br><span class="line">  <span class="keyword">var</span> pubDate = date.toDateString();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Written by "</span> + author);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Published "</span> + pubDate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publish(<span class="string">"How are you?"</span>, <span class="string">"Monique"</span>, messages);</span><br><span class="line"></span><br><span class="line">publish(<span class="string">"10 Tips for JavaScript Developers"</span>, <span class="string">"Jane Doe"</span>, articles);</span><br></pre></td></tr></table></figure></p>
<p>重复的代码模式<code>console.log(item) and var date = new Date()</code>被抽取到一个独立和通用的函数<code>publish()</code>, 只在其它函数（即回调函数）中留下特定的数据. 这样，只用一个同样的函数就可以打印所有类似的东西:消息、文章、书箱、杂志等等。你只需要做一件事-为每种类型创建一个特定的回调函数，把它作为实参传递给<code>publish()</code>函数。</p>
<h1 id="Immediately-Invoked_Function_Expressions__28IIFEs_29"><a href="#Immediately-Invoked_Function_Expressions__28IIFEs_29" class="headerlink" title="Immediately-Invoked Function Expressions (IIFEs)"></a>Immediately-Invoked Function Expressions (IIFEs)</h1><p><strong>Immediately-invoked function expression</strong>, <strong>IIFE</strong> (发音为“iffy”), 是一个在创建后被立即执行的函数表达式（命名或匿名）。</p>
<p>IIFEs有两种有细微差别语法形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// variant 1</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Woohoo!'</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// variant 2</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Woohoo!'</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p>
<p>把一个常规函数变为IIFE，需要以下两步：</p>
<ol>
<li>将整个函数包围在圆括号中。如其名称，IIFE必须是一个函数表达式，而不是一个函数定义。圆括号的目的是把函数定义变为表达式。因为在JavaScript中, 所有在圆括号内的代码被当作一个表达式。</li>
<li>在变化1中，需要在末尾添加一对圆括号，或者在变化2中，紧跟花括号添加一对圆括号，以让函数立即执行。</li>
</ol>
<p>还有三点要记住：</p>
<p>首先，如果把函数赋值给一个变量，不需要用圆括号包围这个函数，赋值操作本身就是一个表达式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sayWoohoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'Woohoo!'</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p>
<p>其次，IIFE最后需要一个分号.</p>
<p>第三点，可以给IIFE传递实参（因为它本身毕竟是一个函数）:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">name, profession</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"My name is "</span> + name + <span class="string">". I'm an "</span> + profession + <span class="string">"."</span>);</span><br><span class="line">&#125;)(<span class="string">"Jackie Chan"</span>, <span class="string">"actor"</span>);   <span class="comment">// output: My name is Jackie Chan. I'm an actor.</span></span><br></pre></td></tr></table></figure></p>
<p>把全局对象作为一个实参传递给IIFE是一种常见使用方式，这样在函数内部就可以访问全局对象，而不需要使用<code>window</code>对象, 从而使代码独立于浏览器环境。下面的例子创建一个全局变量以引用全局对象，与平台无关:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// access the global object via 'global'</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<p>上面的代码既可以在浏览器（全局对象为<code>window</code>）中运行,也可以在Node.js（用特殊变量<code>global</code>引用全局对象）.</p>
<p>IIFE的好处之一是，不用担心临时变量对全局空间的污染. 所有在IIFE内定义的变量都是局部变量：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> currentTime = today.toLocaleTimeString();</span><br><span class="line">  <span class="built_in">console</span>.log(currentTime);   <span class="comment">// output: the current local time (e.g. 7:08:52 PM)</span></span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(currentTime);   <span class="comment">// output: undefined</span></span><br></pre></td></tr></table></figure></p>
<p>在这个例子中，第一个<code>console.log()</code>正常工作，第二个会失败，因为变量<code>today</code>和<code>currentTime</code>是局部的。</p>
<p>我们知道，闭包保留了对外部变量的引用，因此，只返回最近最新的值。那么，下面这个例子的输出是什么呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printFruits</span>(<span class="params">fruits</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fruits.length; i++) &#123;</span><br><span class="line">    setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log( fruits[i] );</span><br><span class="line">    &#125;, i * <span class="number">1000</span> );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printFruits([<span class="string">"Lemon"</span>, <span class="string">"Orange"</span>, <span class="string">"Mango"</span>, <span class="string">"Banana"</span>]);</span><br></pre></td></tr></table></figure></p>
<p>看起来像是间隔1秒顺序输出4种水果的名字。但实际上，是4次 “undefined”.</p>
<p>关键的地方在于<code>i</code>的值, 在<code>console.log()</code>中它在每次循环中都等于4，而<code>fruits</code>数组没有第5个元素，因此输出为“undefined”.循环结束的条件是<code>i &lt; fruits.length</code>返回<code>false</code>. 因此，循环结束时，<code>i</code>的值是4. 当定时器触发时，<code>i</code>的引用内存储的值为4，<code>console.log()</code>这个闭包函数根据这个引用取得最后，也就是最新的值4.</p>
<p>要修订这个问题，需要提供一个新的作用域：为每轮循环创建函数，以获取变量<code>i</code>的当前状态。 把<code>setTimeout()</code>包围在IIFE中，并在IIFE中定义一个私有变量，以保存当前<code>i</code>值的复本。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printFruits</span>(<span class="params">fruits</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &amp;lt; fruits.length; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> current = i;                    <span class="comment">// define new variable that will hold the current value of "i"</span></span><br><span class="line">      setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( fruits[current] );   <span class="comment">// this time the value of "current" will be different for each iteration</span></span><br><span class="line">      &#125;, current * <span class="number">1000</span> );</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printFruits([<span class="string">"Lemon"</span>, <span class="string">"Orange"</span>, <span class="string">"Mango"</span>, <span class="string">"Banana"</span>]);</span><br></pre></td></tr></table></figure></p>
<p>下面是另一种实现形式，效果一样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printFruits</span>(<span class="params">fruits</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &amp;lt; fruits.length; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">current</span>)</span>&#123;</span><br><span class="line">      setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( fruits[current] );</span><br><span class="line">      &#125;, current * <span class="number">1000</span> );</span><br><span class="line">    &#125;)( i );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printFruits([<span class="string">"Lemon"</span>, <span class="string">"Orange"</span>, <span class="string">"Mango"</span>, <span class="string">"Banana"</span>]);</span><br></pre></td></tr></table></figure></p>
<p>IIFE常用于创建域以封闭模块。在模块内部，是自包含的私有域，免于不经意的篡改。这种技术称为模块模式，是使用闭包管理作用域的强大例子，在现代JavaScript库中(如jQuery、Underscore）频繁使用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h1><p>在JavaScript中, 一个<code>closure</code>就是一个保留了对父作]]>
    </summary>
    
      <category term="Callback" scheme="http://yoursite.com/tags/Callback/"/>
    
      <category term="Closure" scheme="http://yoursite.com/tags/Closure/"/>
    
      <category term="IIFE" scheme="http://yoursite.com/tags/IIFE/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Browserify]]></title>
    <link href="http://yoursite.com/2016/03/01/Browserify/"/>
    <id>http://yoursite.com/2016/03/01/Browserify/</id>
    <published>2016-03-01T07:21:01.000Z</published>
    <updated>2016-03-04T03:37:33.727Z</updated>
    <content type="html"><![CDATA[<p><strong>Browserify</strong>是JavaScript一种模块加载器， 作为代码的一个<strong>pre-processor</strong>,提供当前语言缺乏的对浏览器内导入模块的支持。与CSS的扩展如<strong>SASS</strong>和<strong>LESS</strong>为样式表增加语法支持相似，<strong>Browserify</strong>递归扫描源代码中的全局<code>require()</code>函数调用，增强客户端JavaScript应用。当<strong>Browserify</strong>找到这样的调用时，立刻加载被引用的模块（使用Node.js中的同一个<code>require()</code>函数），将它们组合为单个精简文件-一个bundle-可被加载到浏览器中。</p>
<p>这种简单但简洁的方式，把<strong>CommonJS</strong>（Node.js中加载模块的方式）的能力和方便带给浏览器，同时也完成了<strong>Asynchronous Module Definition (AMD)</strong> loaders如<strong>RequireJS</strong>所需的复杂性和代码引用.</p>
<h2 id="AMD_API__u4E0E_CommonJS"><a href="#AMD_API__u4E0E_CommonJS" class="headerlink" title="AMD API 与 CommonJS"></a>AMD API 与 CommonJS</h2><p>AMD API是一种解决JavaScript当前缺乏对inline加载外部模块支持的巧妙方法。AMD API通常被称为“浏览器优先”方法，每个被加载的模块被打包在一个回调函数中，然后被按需异步加载（例如lazy loaded），以达到把模块加载到浏览器的目标。如Listing 6-1所示。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">1.</span> Defining and Requiring an AMD Module</span><br><span class="line"><span class="comment">// requirejs-example/public/app/weather.js</span></span><br><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="string">'getForecast'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'forecast'</span>).innerHTML = <span class="string">'Partly cloudy.'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// requirejs-example/public/app/index.js</span></span><br><span class="line">define([<span class="string">'weather'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">weather</span>) </span>&#123;</span><br><span class="line">	weather.getForecast();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>AMD API虽然巧妙有效，但有点笨拙啰嗦。理想的情况是，在不增加复杂度的情况下，引用所需的外部模块和模板代码。<strong>CommonJS</strong>是广为人知的解决方法。</p>
<h2 id="Browserify_u5B89_u88C5"><a href="#Browserify_u5B89_u88C5" class="headerlink" title="Browserify安装"></a>Browserify安装</h2><p>Browserify命令行工具，是npm的一个包，安装过程如Listing 6-2.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">2</span>. Installing the browserify Command-Line Utility via npm</span><br><span class="line">$ npm install -g browserify</span><br><span class="line">$ browserify --version</span><br><span class="line"><span class="number">10.2</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure></p>
<p><em>注意：这里<code>Browerify</code>被安装在全局上下文环境，通常命令行工具都在全局环境下安装。</em></p>
<h2 id="u521B_u5EFA_u7B2C_u4E00_u4E2ABundle"><a href="#u521B_u5EFA_u7B2C_u4E00_u4E2ABundle" class="headerlink" title="创建第一个Bundle"></a>创建第一个Bundle</h2><p>对Browserify的多数诉求归于简洁。对CommonJS和Node非常熟悉的JavaScript开发者马上发现他们回家了。Listing 6-3是基于CommonJS的与 Listing 6-1 （基于RequireJS）同样功能的应用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">3.</span> Front-End Application That Requires Modules via CommonJS</span><br><span class="line"><span class="comment">// simple/public/app/index.js</span></span><br><span class="line"><span class="keyword">var</span> weather = <span class="built_in">require</span>(<span class="string">'./weather'</span>);</span><br><span class="line">weather.getForecast();</span><br><span class="line"></span><br><span class="line"><span class="comment">// simple/public/app/weather.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	<span class="string">'getForecast'</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">document</span>.getElementById(<span class="string">'forecast'</span>).innerHTML = <span class="string">'Partly cloudy.'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>这段代码不能直接在浏览器中运行（基于RequireJS的可以），因为浏览器没有内建机制通过<code>require()</code>函数加载模块。必须先通过<strong>browserify</strong>命令行工具或<strong>Browserify API</strong>编译进bundle中。使用命令行工具编译的命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ browserify app/index.js -o public/dist/app.js</span><br></pre></td></tr></table></figure></p>
<p>应用的主文件路径<code>public/app/index.js</code>，被传递给browserify工具 main file, 输出被限定保存到<code>public/dist/app.js</code>，在Listing 6-4 中被引用.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Listing 6-4. HTML File Referencing Our Compiled Browserify Bundle</span><br><span class="line">// simple/public/index.html</span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=edge"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>Browserify - Simple Example<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"forecast"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/dist/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>通过<strong>Browser API</strong>可将此过程集成进更大型的build过程（例如通过Grunt这样的工具）。 Listing6-5是这个例子计划的<code>browserify</code> Grunt任务。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">5.</span> Grunt Task That Compiles the Application via Browserify’s API</span><br><span class="line"><span class="comment">// simple/tasks/browserify.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	grunt.registerTask(<span class="string">'browserify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> done = <span class="keyword">this</span>.async();</span><br><span class="line">		<span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">		<span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">		<span class="keyword">var</span> src = path.join(<span class="string">'public'</span>, <span class="string">'app'</span>, <span class="string">'index.js'</span>);</span><br><span class="line">		<span class="keyword">var</span> target = path.join(<span class="string">'public'</span>, <span class="string">'dist'</span>, <span class="string">'app.js'</span>);</span><br><span class="line">		<span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>)([src]);</span><br><span class="line">		browserify.bundle(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (err) <span class="keyword">return</span> grunt.fail.fatal(err);</span><br><span class="line">			grunt.file.mkdir(path.join(<span class="string">'public'</span>, <span class="string">'dist'</span>));</span><br><span class="line">			fs.writeFileSync(target, data);</span><br><span class="line">			done();</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="u53D1_u751F_u53D8_u5316_u521B_u5EFA_u65B0_u7684Bundles"><a href="#u53D1_u751F_u53D8_u5316_u521B_u5EFA_u65B0_u7684Bundles" class="headerlink" title="发生变化创建新的Bundles"></a>发生变化创建新的Bundles</h2><p>使用Browserify的计划不能直接在浏览器中运行，必须首先编译。要有效使用这一工具，计划必须被设定为在源码发生变化自动触发编译。有两种实现方式。</p>
<h3 id="u76D1_u63A7_u6587_u4EF6_u53D8_u5316"><a href="#u76D1_u63A7_u6587_u4EF6_u53D8_u5316" class="headerlink" title="监控文件变化"></a>监控文件变化</h3><p><code>grunt-contrib-watch</code>可用于在源码发生变化时触发build过程。Listing 6-6是一个例子。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ grunt</span><br><span class="line">Running <span class="string">"browserify"</span> task</span><br><span class="line"></span><br><span class="line">Running <span class="string">"concurrent:serve"</span> (concurrent) task</span><br><span class="line">	Running <span class="string">"watch"</span> task</span><br><span class="line">	Waiting...</span><br><span class="line">	Running <span class="string">"server"</span> task</span><br><span class="line">	App is now available at: http://localhost:<span class="number">7000</span></span><br><span class="line">	&gt;&gt; File <span class="string">"app/index.js"</span> changed.</span><br><span class="line">	Running <span class="string">"browserify"</span> task</span><br><span class="line"></span><br><span class="line">	Done, without errors.</span><br><span class="line">	Completed <span class="keyword">in</span> <span class="number">0.615</span>s at Fri Jun <span class="number">26</span> <span class="number">2015</span> <span class="number">08</span>:<span class="number">31</span>:<span class="number">25</span> GMT-<span class="number">0500</span> (CDT) - Waiting...</span><br></pre></td></tr></table></figure></p>
<p>在这个例子中，默认的Grunt任务触发三个步骤：</p>
<ul>
<li>立即创建一个Browserify bundle.</li>
<li>启动一个web服务器，作为当前project的主机.</li>
<li>执行当侦测到源码发生变化时创建新Browserify Bundles的监控脚本</li>
</ul>
<p>这种简单方式对大多数小计划足够用了。但当小计划演进为大计划后，build过程的时间不断增加，等待时间变长。Browserify的姊妹应用<strong>Watchify</strong>对这类情况有所帮助。</p>
<h2 id="u4F7F_u7528Watchify_u76D1_u63A7_u6587_u4EF6_u53D8_u5316"><a href="#u4F7F_u7528Watchify_u76D1_u63A7_u6587_u4EF6_u53D8_u5316" class="headerlink" title="使用Watchify监控文件变化"></a>使用Watchify监控文件变化</h2><p>当<strong>Watchify</strong>被调用时，首先编译应用为一个整体，但是在过程完成后并不退出，而是继续运行，监控源代码路径下的文件变化。当侦测到变化发生时，<strong>Watchify</strong>只编译发生变化的文件，因此编译时间大缩短。<strong>Watchify</strong>在每次编译时维护自己内部的缓存机制。要实现<strong>Browserify</strong>, <strong>Watchify</strong>可通过命令行或API调用。在<strong>Listing 6-7</strong>中, <em>simple</em>计划通过<strong>Watchify</strong>的命令行工具编译。<code>-v</code>参数指定<strong>Watchify</strong>以<code>verbose</code>模式运行. 作为结果，<strong>Watchify</strong>告知有变化发生。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">7</span>. Installing Watchify via npm and Running It Against simple Project</span><br><span class="line">$ npm install -g watchify</span><br><span class="line">$ watchify public/app/index.js -o public/dist/app.js -v</span><br><span class="line"><span class="number">778</span> bytes written to public/dist/app.js (<span class="number">0.03</span> seconds)</span><br><span class="line"><span class="number">786</span> bytes written to public/dist/app.js (<span class="number">0.01</span> seconds)</span><br></pre></td></tr></table></figure>
<p><strong>Watchify</strong>也提供了API，以用于大型编译过程集成(如 Listing 6-8). 只需对<code>Listing 6-7</code>稍加改动.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">8.</span> Grunt Task Demonstrating the Use <span class="keyword">of</span> Watchify’s API</span><br><span class="line"><span class="comment">// simple/tasks/watchify.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">	grunt.registerTask(<span class="string">'watchify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> done = <span class="keyword">this</span>.async();</span><br><span class="line">		<span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>);</span><br><span class="line">		<span class="keyword">var</span> watchify = <span class="built_in">require</span>(<span class="string">'watchify'</span>);</span><br><span class="line">		<span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">		<span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">		<span class="keyword">var</span> src = path.join(<span class="string">'public'</span>, <span class="string">'app'</span>, <span class="string">'index.js'</span>);</span><br><span class="line">		<span class="keyword">var</span> target = path.join(<span class="string">'public'</span>, <span class="string">'dist'</span>, <span class="string">'app.js'</span>);</span><br><span class="line">		<span class="keyword">var</span> targetDir = path.join(<span class="string">'public'</span>, <span class="string">'dist'</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">var</span> browserify = browserify(&#123;</span><br><span class="line">			<span class="string">'cache'</span>: &#123;&#125;,</span><br><span class="line">			<span class="string">'packageCache'</span>: &#123;&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		browserify = watchify(browserify);</span><br><span class="line">		browserify.add(src);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">var</span> compile = <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (err) <span class="keyword">return</span> grunt.log.error(err);</span><br><span class="line">			<span class="keyword">if</span> (!data) <span class="keyword">return</span> grunt.log.error(<span class="string">'No data'</span>);</span><br><span class="line">			grunt.file.mkdir(targetDir);</span><br><span class="line">			fs.writeFileSync(target, data);</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		browserify.bundle(compile);</span><br><span class="line"></span><br><span class="line">		browserify.on(<span class="string">'update'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			browserify.bundle(compile);</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		browserify.on(<span class="string">'log'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">			grunt.log.oklns(msg);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="Using_Multiple_Bundles"><a href="#Using_Multiple_Bundles" class="headerlink" title="Using Multiple Bundles"></a>Using Multiple Bundles</h2><p>通常应用的自有代码只占编译代码的一小部分，大部分是第三方库（如Angular, jQuery,Lodash等等），不会经常变化。因此，可将应用的编译分为两部分：自有代码与第三方库，分别编译。</p>
<p>例如<code>extracted</code>计划与<code>advanced</code>计划基本一样，除了一点：<code>extracted</code>编译过程创建了两个独立的<strong>Browserify</strong> bundles，而不是一个:</p>
<ul>
<li>/dist/vendor.js: 第三方依赖</li>
<li>/dist/app.js: 应用定制代码<br>通过这种方法，浏览器可有效地在更新发布时获取新计划。换句话说，因为变化在应用定制代码内发生，浏览器只需重新下载<code>/dist/app.js</code>. 与<code>advanced</code>计划对比一下，当（不论多么小）变化发生时， 每次更新都需要重新下载整个bundle.</li>
</ul>
<p><code>Listing 6-9</code>是<code>extracted</code>计划的HTML文件，其中引用了两个独立的bundles：<code>/dist/vendor.js</code>和<code>/dist/app.js</code>.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Listing 6-9. HTML for This Chapter’s extracted Project</span><br><span class="line">// extracted/public/index.html</span><br><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">ng-app</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"X-UA-Compatible"</span> <span class="attribute">content</span>=<span class="value">"IE=edge"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"viewport"</span> <span class="attribute">content</span>=<span class="value">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>Browserify - Advanced Example<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"/css/style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="title">navbar</span> <span class="attribute">ng-if</span>=<span class="value">"user_id"</span>&gt;</span><span class="tag">&lt;/<span class="title">navbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">ng-view</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">footer</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/disc.html"</span>&gt;</span>View this project's dependency tree<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/dist/vendor.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/dist/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>Listing 6-10</code> 是<code>extracted</code>计划的Gruntfile. 注意一个特殊的配置项(browserify.vendor_modules)的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">10.</span> Gruntfile <span class="keyword">for</span> This Chapter’s extracted Project</span><br><span class="line"><span class="comment">// extracted/Gruntfile.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	grunt.initConfig(&#123;</span><br><span class="line">		<span class="string">'browserify'</span>: &#123;</span><br><span class="line">			<span class="string">'vendor_modules'</span>: [</span><br><span class="line">				<span class="string">'angular'</span>,</span><br><span class="line">				<span class="string">'bootstrap-sass'</span>,</span><br><span class="line">				<span class="string">'jquery'</span>,</span><br><span class="line">				<span class="string">'angular-route'</span>,</span><br><span class="line">				<span class="string">'angular-sanitize'</span>,</span><br><span class="line">				<span class="string">'restangular'</span>,</span><br><span class="line">				<span class="string">'jquery.cookie'</span>,</span><br><span class="line">				<span class="string">'lodash'</span>,</span><br><span class="line">				<span class="string">'underscore.string'</span>,</span><br><span class="line">				<span class="string">'lodash-deep'</span></span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	grunt.loadTasks(<span class="string">'tasks'</span>);</span><br><span class="line"></span><br><span class="line">	grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'compass'</span>, <span class="string">'browserify'</span>, <span class="string">'browserify-vendor'</span>, <span class="string">'init-db'</span>,</span><br><span class="line">		<span class="string">'concurrent'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><code>Listing 6-11</code>是<code>extracted</code>计划的<code>browserify Grunt task</code>的内容. 该任务很大程度上模仿了<code>advanced</code>计划的对应任务，除了一点例外。该任务遍历该计划的Gruntfile中定义的第三方模块，<strong>Browserify</strong>被设置为从编译bundle中排除这引用的模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">11.</span> The extracted Project’s browserify Grunt Task</span><br><span class="line"><span class="comment">// extracted/tasks/browserify.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	grunt.registerTask(<span class="string">'browserify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> done = <span class="keyword">this</span>.async();</span><br><span class="line">		<span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">		<span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">		<span class="keyword">var</span> target = path.join(<span class="string">'public'</span>, <span class="string">'dist'</span>, <span class="string">'app.js'</span>);</span><br><span class="line">		<span class="keyword">var</span> vendorModules = grunt.config.get(<span class="string">'browserify.vendor_modules'</span>) || [];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>)([</span><br><span class="line">			path.join(<span class="string">'app'</span>, <span class="string">'index.js'</span>)</span><br><span class="line">		], &#123;</span><br><span class="line">			<span class="string">'paths'</span>: [<span class="string">'app'</span>],</span><br><span class="line">			<span class="string">'fullPaths'</span>: <span class="literal">true</span>,</span><br><span class="line">			<span class="string">'bundleExternal'</span>: <span class="literal">true</span></span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		vendorModules.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">			grunt.log.writelns(<span class="string">'Excluding module from application bundle: %s'</span>, vm);</span><br><span class="line">			browserify.exclude(vm);</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		browserify.bundle(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (err) <span class="keyword">return</span> grunt.fail.fatal(err);</span><br><span class="line">			grunt.file.mkdir(path.join(<span class="string">'public'</span>, <span class="string">'dist'</span>));</span><br><span class="line">			fs.writeFileSync(target, data);</span><br><span class="line">			grunt.task.run(<span class="string">'disc'</span>);</span><br><span class="line">			done();</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><code>Listing 6-12</code>是<code>extracted</code>计划的<code>browserify-vendor Grunt task</code>的内容.这个任务创建一个独立的Browserify bundle，只由<code>Listing 6-10</code>中定义的第三方模块组成。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">12.</span> The extracted Project’s browserify-vendor Grunt Task</span><br><span class="line"><span class="comment">// extracted/tasks/browserify-vendor.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	grunt.registerTask(<span class="string">'browserify-vendor'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> done = <span class="keyword">this</span>.async();</span><br><span class="line">		<span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">		<span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">		<span class="keyword">var</span> target = path.join(<span class="string">'public'</span>, <span class="string">'dist'</span>, <span class="string">'vendor.js'</span>);</span><br><span class="line">		<span class="keyword">var</span> vendorModules = grunt.config.get(<span class="string">'browserify.vendor_modules'</span>) || [];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>)(&#123;</span><br><span class="line">			<span class="string">'paths'</span>: [</span><br><span class="line">				<span class="string">'app'</span></span><br><span class="line">			],</span><br><span class="line">			<span class="string">'fullPaths'</span>: <span class="literal">true</span></span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		vendorModules.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">			browserify.require(vm);</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">		browserify.bundle(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (err) <span class="keyword">return</span> grunt.fail.fatal(err);</span><br><span class="line">			grunt.file.mkdir(path.join(<span class="string">'public'</span>, <span class="string">'dist'</span>));</span><br><span class="line">			fs.writeFileSync(target, data);</span><br><span class="line">			done();</span><br><span class="line">		&#125;);</span><br><span class="line"></span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>在<code>extracted</code>计划路径下运行<code>$ npm start</code>. 缺少的npm modules会自动安装，计划的默认Grunt任务会执行，两个独立的bundles被创建。包含定制代码的bundle是<code>/dist/app.js</code>,文件大小减少。</p>
<h2 id="The_Node_Way"><a href="#The_Node_Way" class="headerlink" title="The Node Way"></a>The Node Way</h2><p><strong>Browserify</strong>调用全局<code>require()</code>函数，递归扫描源码路径，加载引用的模块进行编译。这个函数与<strong>Node</strong>的<code>require()</code>函数是同一个。之后，<strong>Browserify</strong>将其合并为一个bundle供浏览器加载。</p>
<p>就这一点而言，使用Browserify的计划可被当作客户端侧的Node应用。许多方面令初学者感到困惑，但以这种方式思考就可以理解。其中两点是：模块解析和依赖管理。</p>
<h3 id="u6A21_u5757_u89E3_u6790_u548CNODE_PATH__u73AF_u5883_u53D8_u91CF"><a href="#u6A21_u5757_u89E3_u6790_u548CNODE_PATH__u73AF_u5883_u53D8_u91CF" class="headerlink" title="模块解析和NODE_PATH 环境变量"></a>模块解析和NODE_PATH 环境变量</h3><p>Node应用可以多种方式引用模块。例如，通过模块对于应用的相对路径require它：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = <span class="built_in">require</span>(<span class="string">'./lib/animals'</span>);</span><br></pre></td></tr></table></figure></p>
<p>相似地，也可以通过绝对路径进行引用。这两种方法里，Node查找模块的位置都相当明确。而下面这个通过名称进行引用的例子，位置信息没有直接提供：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = <span class="built_in">require</span>(<span class="string">'animals'</span>);</span><br></pre></td></tr></table></figure></p>
<p>在这种情况，Node首先尝试在核心库中定位模块，这个过程可通过Node加载文件系统模块<code>fs</code>观察到。如果没找到，Node接着搜索名为<code>node_modules</code>的文件夹, 起始位置为调用<code>require()</code>函数的模块，逐级向上。当找到文件夹时，Node查找是否含有被请求的模块（或包）。这个过程一直持续，直到找到为止。如果没有找到，则会抛出异常。</p>
<p>但是，Node也提供了指定模块搜索的<code>additional</code>文件夹的方式，避免查找结果为空的情况。</p>
<p><code>Listing 6-13</code>是<code>path-env</code>计划的<code>package.json</code>文件节选。其中已指定的<code>start</code>的部分非常重要。根据其中的设定，当<code>$ npm start</code>执行时，在应用运行前，<strong>NODE_PATH</strong>环境变量被更新以包含对该计划的<code>/lib</code>文件夹的引用。作为结果，Node将其加入解析模块时要搜索的文件夹。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Listing 6-13. This Project&#8217;s npm start Script Updates the NODE_PATH Environment Variable&#10;// path-env/package.json&#10;&#123;&#10;&#9;&#34;name&#34;: &#34;path-env&#34;,&#10;&#9;&#34;version&#34;: &#34;1.0.0&#34;,&#10;&#9;&#34;main&#34;: &#34;./bin/index.js&#34;,&#10;&#9;&#34;scripts&#34;: &#123;&#10;&#9;&#9;&#34;start&#34;: &#34;export NODE_PATH=$NODE_PATH:./lib &#38;&#38; node ./bin/index.js&#34;&#10;&#9;&#125;&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<p>设置<strong>NODE_PATH</strong>环境变量，可为较复杂计划的整洁和可维护性带来明显的正面效应。因为从本质上来说，这种方法创建了一个命名空间，应用的模块（并不是作为npm管理的包）可通过命名空间以名称方式引用，而不用通过冗长的相对路径。<code>Listing 6-14</code>是一个实际应用当中的例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">14.</span> Several <span class="keyword">of</span> the Modules Contained Within the path-env Project</span><br><span class="line"><span class="comment">// path-env/bin/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">'app/api'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// path-env/lib/app/api/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> animals = <span class="built_in">require</span>(<span class="string">'app/models/animal'</span>);</span><br><span class="line">app.use(<span class="string">'/'</span>, express.static(path.join(__dirname, <span class="string">'..'</span>, <span class="string">'..'</span>, <span class="string">'..'</span>, <span class="string">'public'</span>)));</span><br><span class="line">app.get(<span class="string">'/animals'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">	res.send(animals);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">7000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'App is now available at: http://localhost:7000'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = app;</span><br><span class="line"></span><br><span class="line"><span class="comment">// path-env/lib/app/models/animal/index.js</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="built_in">module</span>.exports = [</span><br><span class="line">	<span class="string">'Aardvarks'</span>, <span class="string">'Cats'</span>, <span class="string">'Dogs'</span>, <span class="string">'Lemurs'</span>, <span class="string">'Three-Toed Sloths'</span>, <span class="string">'Zebras'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<p>这个例子没有对相对路径模块的引用。计划的主script, <code>bin/index.js</code>, 通过<code>require(&#39;app/api&#39;)；</code>加载一个定制模块以初始化Express; 另一种方式是通过相对路径: <code>require(&#39;../lib/app/api&#39;)；</code>. 在复杂的Node计划中常常会遇到诸如<code>require(&#39;../../../../models/animal&#39;)</code>这样的模块引用场景，这时就能体会到这种方法的好处。</p>
<hr>
<p>■■<strong>注意</strong> 重点要记住使用<strong>NODE_PATH</strong>环境变量，只对当前Node（或Browserify）应用有意义，而不是作为一个package. 当创建一个可重复使用的package时，只能依赖于Node的默认模块解析方式。</p>
<hr>
<h3 id="u5728Browserify_u4E2D_u5229_u7528NODE_PATH"><a href="#u5728Browserify_u4E2D_u5229_u7528NODE_PATH" class="headerlink" title="在Browserify中利用NODE_PATH"></a>在Browserify中利用NODE_PATH</h3><p>目前为止，我们已明了<strong>NODE_PATH</strong>在服务器端Node应用中的积极作用。以此为基础，可将这一概念应用到客户端Browserify编译的基于浏览器的应用。<br><code>Listing 6-15</code>是<code>advanced</code>计划的browserify Grunt task，负责通过Browserify API编译应用。其中重要的是<code>paths</code>选项的使用，可在编译开始前为<strong>Browserify</strong>提供一组附加到<strong>NODE_PATH</strong>环境变量的路径。就是这个设置项使我们可以轻松实现前述章节中的优点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">15.</span> The browserify Grunt Task <span class="keyword">for</span> This Chapter’s advanced Project</span><br><span class="line"></span><br><span class="line"><span class="comment">// advanced/tasks/browserify.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">	grunt.registerTask(<span class="string">'browserify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> done = <span class="keyword">this</span>.async();</span><br><span class="line">		<span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">		<span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">		<span class="keyword">var</span> target = path.join(<span class="string">'public'</span>, <span class="string">'dist'</span>, <span class="string">'app.js'</span>);</span><br><span class="line">		<span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>)([</span><br><span class="line">			path.join(<span class="string">'app'</span>, <span class="string">'index.js'</span>)</span><br><span class="line">		], &#123;</span><br><span class="line">			<span class="string">'paths'</span>: [</span><br><span class="line">				<span class="string">'app'</span></span><br><span class="line">		],</span><br><span class="line">		<span class="string">'fullPaths'</span>: <span class="literal">true</span></span><br><span class="line">	&#125;);</span><br><span class="line">	browserify.bundle(<span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (err) <span class="keyword">return</span> grunt.fail.fatal(err);</span><br><span class="line">			grunt.file.mkdir(path.join(<span class="string">'public'</span>, <span class="string">'dist'</span>));</span><br><span class="line">			fs.writeFileSync(target, data);</span><br><span class="line">			grunt.task.run(<span class="string">'disc'</span>);</span><br><span class="line">			done();</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><code>Listing 6-16</code>中一个小模块负责加载<code>lodash</code>并集成两个第三方工具<code>underscore.string</code>和<code>lodash-deep</code>. 最后的输出值是包含三个模块功能的单一对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">16.</span> Module Responsible <span class="keyword">for</span> Loading Lodash and Integrating Various Third-Party Plugins</span><br><span class="line"></span><br><span class="line"><span class="comment">// advanced/app/utils/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line">_.mixin(<span class="built_in">require</span>(<span class="string">'underscore.string'</span>));</span><br><span class="line">_.mixin(<span class="built_in">require</span>(<span class="string">'lodash-deep'</span>));</span><br><span class="line"><span class="built_in">module</span>.exports = _;</span><br></pre></td></tr></table></figure></p>
<p><code>paths</code>的值被提供给Browserify, 应用可从任何位置通过调用<code>require(&#39;app/utils&#39;);</code>引用这个模块.</p>
<p>###　依赖管理<br>直到近期，“dependency management”这一提法一直(在大多数情况下) 是客户端侧基于浏览器应用的执行环境的一个外部概念.但这一趋势正在迅速改变，这大部分归功于Node及构建在其上的附加功能(例如Bower, Grunt, and Yeoman等)的迅速普及.</p>
<p>在依赖管理方面，<strong>Bower</strong>为客户端开发人员提供了易于使用的机制以管理应用依赖的不同的第三方库。对于新手或不使用客户端侧编译器如Browserify的开发人员，<strong>Bower</strong>一直并将继续作为一个管理依赖的可选项。但是， 相对于Browserify的优点,Bower显得有点老了。</p>
<p>在依赖管理方面，<em>使用Browserify的计划最好被当作客户端侧Node应用</em>，这一陈述更显恰当。回想一下Browserify的编译过程，源码被扫描以查找对全局<code>require()</code>函数的调用。这些调用在Node中执行，返回值可被客户端应用使用。这里有一个重要的暗示，即当使用Browserify时,开发人员只依赖Node的包管理npm，依赖管理被显著简化。虽然从技术上可以做到指令Browserify加载根据Bower安装的packages，但一般不干这样划不来的事。</p>
<h2 id="u5B9A_u4E49Browser-Specific_Modules"><a href="#u5B9A_u4E49Browser-Specific_Modules" class="headerlink" title="定义Browser-Specific Modules"></a>定义Browser-Specific Modules</h2><p>创建一个新模块，并通过npm发布共享，模块可在Node和浏览器中使用。要实现这一目标，<strong>Browserify</strong>在计划的<code>package.json</code>文件中提供了<code>browser</code> 配置选项。这个选项允许开发人员覆盖用于定位模块的位置信息。</p>
<p><code>Listing 6-17</code>中的package,有两个模块：<code>lib/node.js</code>和<code>lib/browser.js</code>. 参考这个package的<code>package.json</code>文件，其主模块是<code>lib/node.js</code>. 换句话说，当这个package在Node中通过名字被引用时，它就是Node要加载的模块。但需要注意的是，一个额外的选项在这里被配置：<code>&quot;browser&quot;: &quot;./lib/browser.js&quot;</code>. 根据这一选项，Browserify将加载这一模块，而不是由主模块指定的模块。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Listing 6-17. Module Exposing Two Distinct Entry Points: One for Node, the Other for Browserify</span><br><span class="line"></span><br><span class="line">// browser1/package.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	"name": "browser1",</span><br><span class="line">	"version": "1.0.0",</span><br><span class="line">	"main": "./lib/node.js",</span><br><span class="line">	"browser": "./lib/browser.js"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// browser1/lib/browser.js</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">	'run': function() &#123;</span><br><span class="line">		console.log('I am running within a browser.');</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// browser1/lib/node.js</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">	'run': function() &#123;</span><br><span class="line">		console.log('I am running within Node.');</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>Browserify的<code>browser</code>配置选项不限定为简单地覆盖package的<code>main</code>模块的位置，也可用于覆盖多个模块位置。在<code>Listing 6-18</code>中，<code>package.json</code>文件中的<code>browser</code>选项不是字符串，而是一个对象，这样可以指定多重browser-specific覆盖。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Listing 6-18. Module Exposing Multiple, Distinct Modules for Node and Browserify</span><br><span class="line">// browser2/package.json</span><br><span class="line">&#123;</span><br><span class="line">	"name": "browser2",</span><br><span class="line">	"version": "1.0.0",</span><br><span class="line">	"main": "./lib/node.js",</span><br><span class="line">	"browser": &#123;</span><br><span class="line">		"./lib/node.js": "./lib/browser.js",</span><br><span class="line">		"./lib/extra.js": "./lib/extra-browser.js"</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如<code>Listing 6-17</code>所展现的那样, 这种模式的模块会在其自身暴露两个区别的入口：一个用于Node，一个用于通过Browserify编译的应用。这个例子在这个概念更进一步。当模块被编译时，如果试图加载位于<code>lib/extra.js</code>的模块, 那么相反位于<code>lib/extra-browser</code>被替代。 这种方式下，<code>browser</code>设置选项可创建这样的模块：其功能在Node与在浏览器中差异巨大。</p>
<h2 id="u53D8_u5F62_u4EE5_u6269_u5C55Browserify"><a href="#u53D8_u5F62_u4EE5_u6269_u5C55Browserify" class="headerlink" title="变形以扩展Browserify"></a>变形以扩展Browserify</h2><p>开发人员可在新bundles创建的编译过程中创建称为<code>transforms</code>的插件，以编译Browserify的核心功能。这类transforms经由npm安装，并在其名称被包含到应用的<code>package.json</code>文件中的<code>browserify.transform</code>数组之中后启用</p>
<h3 id="brfs"><a href="#brfs" class="headerlink" title="brfs"></a>brfs</h3><p>brfs变换简化了内联加载文件内容过程。它扩展Browserify编译过程，以搜索所有对<code>fs.readFileSync()</code>方法的调用。当找到该方法时，被引用文件的内容被立即加载并返回。<code>Listing 6-19</code>是<code>transforms-brfs</code>计划的<code>package.json</code>文件相关内容的摘录，<code>brfs</code>已安装并被包含到<code>browserify.transform</code>配置项中。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Listing 6-19. Excerpt from the package.json File for This Chapter’s transforms-brfs Project</span><br><span class="line"></span><br><span class="line">// transforms-brfs/package.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	"name": "transforms-brfs",</span><br><span class="line">	"dependencies": &#123;</span><br><span class="line">		"browserify": "^10.2.4",</span><br><span class="line">		"brfs": "^1.4.0"</span><br><span class="line">	&#125;,	</span><br><span class="line">	"browserify": &#123;</span><br><span class="line">		"transform": [</span><br><span class="line">			"brfs"</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Listing 6-20</code>是该计划的<code>/app/index.js</code>模块。<code>brfs</code>变换将加载<code>/app/templates/lorem.html</code>中的内容, 并赋给<code>tpl</code>变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">20.</span> Loading a Template via fs.readFileSync()</span><br><span class="line"></span><br><span class="line"><span class="comment">// transforms-brfs/app/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line"><span class="keyword">var</span> tpl = fs.readFileSync(__dirname + <span class="string">'/templates/lorem.html'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">$(<span class="string">'#container'</span>).html(tpl);</span><br></pre></td></tr></table></figure></p>
<h3 id="folderify"><a href="#folderify" class="headerlink" title="folderify"></a>folderify</h3><p>与<code>brfs</code>变换很像，<code>folderify</code>变换也可以加载多个内联文件内容,而不是一个文件。<code>Listing 6-21</code>是<code>transforms-folderify</code> 计划的内容。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">21.</span> Loading the Contents <span class="keyword">of</span> Multiple Files <span class="keyword">with</span> folderify</span><br><span class="line"></span><br><span class="line"><span class="comment">// transforms-folderify/app/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line"><span class="keyword">var</span> includeFolder = <span class="built_in">require</span>(<span class="string">'include-folder'</span>);</span><br><span class="line"><span class="keyword">var</span> folder = includeFolder(__dirname + <span class="string">'/templates'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> folder) &#123;</span><br><span class="line">	$(<span class="string">'#container'</span>).append(<span class="string">'&lt;p&gt;'</span> + k + <span class="string">': '</span> + folder[k] + <span class="string">'&lt;/p&gt;'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个例子的<code>package.json</code>文件需要在其<code>browserify.transform</code>数组中包含<code>folderify</code>。Browserify查找对<code>include-folder</code>模块的引用。当其返回的函数被调用时，Browserify将加载在指定路径下找到的每个文件，并以对象的形式返回。</p>
<h3 id="bulkify"><a href="#bulkify" class="headerlink" title="bulkify"></a>bulkify</h3><p><code>bulkify</code>变换可通过一次调用而导入多个模块。<code>Listing 6-22</code>是<code>transforms-bulkify</code>计划的主应用文件的节选。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">22.</span> Main Application File <span class="keyword">for</span> This Chapter’s transforms-bulkify Project</span><br><span class="line"></span><br><span class="line"><span class="comment">// transforms-bulkify/app/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bulk = <span class="built_in">require</span>(<span class="string">'bulk-require'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'app'</span>, [</span><br><span class="line">	<span class="string">'ngRoute'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> routes = bulk(__dirname, [</span><br><span class="line">	<span class="string">'routes/**/route.js'</span></span><br><span class="line">]).routes;</span><br><span class="line"></span><br><span class="line">app.config(<span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> defaultRoute = <span class="string">'dashboard'</span>;</span><br><span class="line"></span><br><span class="line">	_.each(routes, <span class="function"><span class="keyword">function</span>(<span class="params">route, route_name</span>) </span>&#123;</span><br><span class="line">		route = route.route;</span><br><span class="line">		route.config.resolve = route.config.resolve || &#123;&#125;;</span><br><span class="line">		$routeProvider.when(route.route, route.config);</span><br><span class="line">	&#125;);</span><br><span class="line"></span><br><span class="line">	$routeProvider.otherwise(&#123;</span><br><span class="line">		<span class="string">'redirectTo'</span>: defaultRoute</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这是一个<strong>Angular</strong>应用的例子。这里的重点是<code>bulk()</code>方法可以<code>require()</code>多个模块，匹配规则可以是一个或多个模式（例子中是<code>routes/**/route.js</code>）。<br>Figure 6-2 shows the file structure for this project. As you can see, the app/routes module contains<br>three folders, each representing a route within our Angular application. The bulkify transform has allowed<br>us to quickly require() each of these modules with a single call to bulk(). Afterward, we are able to iterate<br>over the resulting object and pass each route to Angular.</p>
<h3 id="Browserify-Shim"><a href="#Browserify-Shim" class="headerlink" title="Browserify-Shim"></a>Browserify-Shim</h3><p>在使用Browserify时，偶然会碰到引入不遵循CommonJS方式模块的情况。例如，第三方的<code>Foo</code>库，加载后同赋给全局<code>window.Foo</code>变量(Listing 6-23). 这样的库可通过<code>browserify-shim</code>变换来引入。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Listing <span class="number">6</span>-<span class="number">23.</span> Third-Party Foo Library That Assigns Itself to the Global Foo Variable</span><br><span class="line"></span><br><span class="line"><span class="comment">// transforms-shim/app/vendor/foo.js</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Bar'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在使用npm将<code>browserify-shim</code>模块安装到当前域后，与前面的<code>Listing 6-19</code>例子一样，在应用的<code>package.json</code>文件中将其添加到变换列表中，以开启该模块功能。然后，在<code>package.json</code>的根层级创建一个<code>browserify-shim</code>对象，作为这个变换的配置对象使用。<code>Listing 6-24</code>中，对象的每个key代表一个不应暴露的模块路径，相应的值是全局变量。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Listing 6-24. Configuring browserify-shim Within a Project’s package.json File</span><br><span class="line"></span><br><span class="line">// transforms-shim/package.json</span><br><span class="line">// </span><br><span class="line">&#123;</span><br><span class="line">	"name": "transforms-shim",</span><br><span class="line">	"version": "1.0.0",</span><br><span class="line">	"main": "server.js",</span><br><span class="line">	"browserify": &#123;</span><br><span class="line">		"transform": [</span><br><span class="line">			"browserify-shim"</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	"browserify-shim": &#123;</span><br><span class="line">		"./app/vendor/foo.js": "Foo"</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当<code>browserify-shim</code>变换安装并配置后，位置<code>app/vendor/foo.js</code>的模块可通过<code>require()</code>正确引入。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>Browserify</strong>是JavaScript一种模块加载器， 作为代码的一个<strong>pre-processor</strong>,提供当前语言缺乏的对浏览器内导入模块的支持。与CSS的扩展如<strong>SASS</strong>和]]>
    </summary>
    
      <category term="Browserify" scheme="http://yoursite.com/tags/Browserify/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[strict mode]]></title>
    <link href="http://yoursite.com/2016/02/26/strict-mode/"/>
    <id>http://yoursite.com/2016/02/26/strict-mode/</id>
    <published>2016-02-26T03:15:23.000Z</published>
    <updated>2016-02-26T03:16:26.203Z</updated>
    <content type="html"><![CDATA[<p>ECMAScript 5定义了严格模式，使JavaScript代码更干净，删除了一些不安全的特点, 增加了更多的警告和逻辑行为。正常(non-strict)模式也被称作草率模式。严格模式帮助避免一些草率的编程实践。建议在默认情况下使用严格模式。<br>在JavaScript文件中，或者在<code>&lt;script&gt;</code>元素的第一行加入下面的语句，就可以切换到严格模式:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">'use strict'</span>;</span><br></pre></td></tr></table></figure></p>
<p>对于不支持<strong>ECMAScript 5</strong>的JavaScript引擎，忽略这行，继续以非严格模式工作。</p>
<p>如果要有基于函数开启严格模式，方法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="pi">	'use strict'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样在老代码上工作时非常便利。全局切换会引起太多的问题，因此在老代码上切换严格模式时一定要小心。</p>
<p><strong>开启严格模式有可能破坏代码</strong><br>代码可能依赖于一个已经不可用的功能，或者在草率模式和严格模式下存在差异性的行为。这种时候最好添加单个严格模式函数。</p>
<p><strong>小心打包</strong><br>同样，打包时也要小心。当连接和（或）精简多个文件时，必须要十分小心严格模式的状态根据需要是否开启。如果不满足需求，开或关都可能破坏代码。</p>
<p><strong>变量必须以严格模式声明</strong><br>所有变量必须以严格模式显示声明。这样可以避免拼写错误。而在草率模式中，为一个未声明的变量赋值会创建一个全局变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sloppyFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	sloppyVar = <span class="number">123</span>;</span><br><span class="line">&#125; sloppyFunc(); <span class="comment">// creates global variable `sloppyVar`</span></span><br><span class="line"><span class="built_in">console</span>.log(sloppyVar); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></p>
<p>在严格模式下，对未声明的变量进行赋值会抛出异常：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strictFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="pi">	'use strict'</span>;</span><br><span class="line">	strictVar = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line">strictFunc(); <span class="comment">// ReferenceError: strictVar is not defined</span></span><br></pre></td></tr></table></figure></p>
<p><strong>eval()函数在严格模式下更简洁</strong><br>在严格模式下，<strong>eval()</strong>函数变得不那么奇怪: 在被评估字符串中声明的变量不再被添加包围<strong>eval()</strong>的作用域。</p>
<p><strong>在严格模式下被阻塞的功能</strong><br><strong>with</strong>表达式不再可用，在编译时会出现语法错误。在草率模式下，以0开头的整数被解析为8进制：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="number">010</span> === <span class="number">8</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>在严格模式下，如果使用下面的文字会抛出语法错误：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="pi">	'use strict'</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">010</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SyntaxError: Octal literals are not allowed in</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ECMAScript 5定义了严格模式，使JavaScript代码更干净，删除了一些不安全的特点, 增加了更多的警告和逻辑行为。正常(non-strict)模式也被称作草率模式。严格模式帮助避免一些草率的编程实践。建议在默认情况下使用严格模式。<br>在JavaScript]]>
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Strict" scheme="http://yoursite.com/tags/Strict/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Try{} and Catch{}]]></title>
    <link href="http://yoursite.com/2016/02/26/Try%7B%7D%20and%20Catch%7B%7D/"/>
    <id>http://yoursite.com/2016/02/26/Try{} and Catch{}/</id>
    <published>2016-02-26T03:15:23.000Z</published>
    <updated>2016-02-26T03:17:32.998Z</updated>
    <content type="html"><![CDATA[<p>Runtime exceptions出现在引用一个未定义变量，或对一个null进行处理时。此时，程序中断，不再向下执行。异常处理是必须的，以避免程序崩溃，也有助于调试。</p>
<p>可能引起runtime exception的代码被打包在一个<code>try{ }</code> 块中。当块中的代码引起运行异常时，相应的异常处理函数会捕获这个异常。 异常处理由<code>catch(exception){}</code>块定义。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a = doesnotexist; <span class="comment">// throws a runtime exception</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(e.message); <span class="comment">//handle the exception</span></span><br><span class="line">	<span class="comment">//prints - "doesnotexist is not defined"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在上面的代码中，<code>var a = doesnotexist;</code>尝试将未定义的变量<strong>doesnotexist</strong>赋值给另一个变量<strong>a</strong>. 程序执行到这里会出现runtime exception. 代码被打包在<code>try{} catch(){}</code>块中，当异常发生（被抛出）时，<code>try{}</code>块中的执行中止，直接执行<code>catch() {}</code>. <strong>catch handler</strong>负责处理异常情况。这里，会在控制台显示错误信息以便调试。</p>
<p>也可以在代码中显式抛出异常，以触发一个未处理的场景：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">engageGear</span>(<span class="params">gear</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(gear===<span class="string">"R"</span>)&#123; <span class="built_in">console</span>.log (<span class="string">"Reversing"</span>);&#125;</span><br><span class="line">	<span class="keyword">if</span>(gear===<span class="string">"D"</span>)&#123; <span class="built_in">console</span>.log (<span class="string">"Driving"</span>);&#125;</span><br><span class="line">	<span class="keyword">if</span>(gear===<span class="string">"N"</span>)&#123; <span class="built_in">console</span>.log (<span class="string">"Neutral/Parking"</span>);&#125;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Invalid Gear State"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">	engageGear(<span class="string">"R"</span>); <span class="comment">//Reversing</span></span><br><span class="line">	engageGear(<span class="string">"P"</span>); <span class="comment">//Invalid Gear State</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(e)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(e.message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面是对档位状态进行判断的例子。当接收到无效档位时（R、N、D之外的档位），显式抛出异常以说明原因。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Runtime exceptions出现在引用一个未定义变量，或对一个null进行处理时。此时，程序中断，不再向下执行。异常处理是必须的，以避免程序崩溃，也有助于调试。</p>
<p>可能引起runtime exception的代码被打包在一个<code>try{ }</c]]>
    </summary>
    
      <category term="Exception" scheme="http://yoursite.com/tags/Exception/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node简介]]></title>
    <link href="http://yoursite.com/2016/02/26/Node%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2016/02/26/Node简介/</id>
    <published>2016-02-26T03:15:23.000Z</published>
    <updated>2016-02-26T03:29:07.173Z</updated>
    <content type="html"><![CDATA[<h1 id="u6D4F_u89C8_u5668_u4E2D_u7684_u5F02_u6B65_u4E8B_u4EF6_u6A21_u578B"><a href="#u6D4F_u89C8_u5668_u4E2D_u7684_u5F02_u6B65_u4E8B_u4EF6_u6A21_u578B" class="headerlink" title="浏览器中的异步事件模型"></a>浏览器中的异步事件模型</h1><p>浏览器和Node在使用I/O时都是事件驱动和非阻塞式的。下表是不同操作及成本的比较：<br>|          Operation              |         Cost      |<br>| :——————:  | :——————-: |<br>| L1 cache read         | 0.5 nanoseconds        |<br>| L2 cache read         | 7 nanoseconds |<br>| RAM | 100 nanoseconds |<br>| Read 4 KB randomly from SSD  | 150,000 ns |<br>| Read 1 MB sequentially from SSD | 1,000,000 ns |<br>| Read 1 MB sequentially from disk | 20,000,000 ns |</p>
<p>I/O操作一般比较耗时，等待会降低程序运行速度：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">var</span> log = fileSystemReader.read(<span class="string">"./verybigfile.txt"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"2"</span>);</span><br></pre></td></tr></table></figure></p>
<p>当调用<strong>fileSystemReader.read()</strong>时，从系统读取文件。取决于硬件、文件系统和操作系统等，由于读取完成需要较长时间，这一操作会阻塞整个程序的执行。上面的代码是传统的I/O模式，进程会等待（被阻塞）读取完成。这会非常耗时，且分配给进程的资源也会被占用。</p>
<p>如果发生I/O阻塞, Node服务器拒绝新请求。有若干方式解决这一问题。最普通的常见方式是使用多线程处理请求。<br>浏览器的处理方式不一样。浏览器的I/O操作在主线程之外，当I/O完成时会触发事件。该事件由与事件相关的回调函数处理。这种类型的I/O是非阻塞和异步模式的。由于I/O并不阻塞主执行线程，浏览器可以继续处理其他事件而不用等待I/O. 异步I/O使浏览器可以响应多个事件，实现更高水平的交互性。<br>Node使用类似的概念进行异步处理。Node’s事件循环以单线程方式运行。这意味着应用本质上都是单线程的。但Node自身不是单线程的。Node使用<strong>libuv</strong>因此是多线程的.</p>
<p>每个需要I/O操作的调用都需要注册回调函数。回调函数的注册是异步并立即返回的。当I/O操作完成时，其回调函数被加入事件循环。在其他之前的加入的回调函数执行完成后执行。所有操作本质上是线程安全的，因为事件循环没有需要同步的并行执行路径。</p>
<p>本质上，只有一个线程执行代码，没有并行线程。但除了你的代码之外，其他都是并行。<br>Node.js依赖<strong>libev</strong> (<a href="http://software.schmorp.de/pkg/libev.html)实现事件循环，**libeio**" target="_blank" rel="external">http://software.schmorp.de/pkg/libev.html)实现事件循环，**libeio**</a> (<a href="http://software.schmorp.de/pkg/libeio.html)是其补充以利用线程池提供异步I/O" target="_blank" rel="external">http://software.schmorp.de/pkg/libeio.html)是其补充以利用线程池提供异步I/O</a>.<br>下面是一段Node.js里的异步代码段：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./response.json'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!error)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(data);</span><br><span class="line">	&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'2'</span>);</span><br></pre></td></tr></table></figure></p>
<p>在上面的代码里，从磁盘读取<strong>response.json</strong>文件。当磁盘I/O完成时，回调函数被调用. 在控制台的输出为<code>console.log(&#39;1&#39;)</code> 和<code>console.log(&#39;2&#39;)</code>，一个紧跟着另一个:<br><img src="/./img/1456304332134.png" alt="Alt text"><br>Node.js不需要额外的服务器组件，它自己就可以创建服务器进程。Node应用就是运行在指定端口上的服务器。在Node里，server和application是同样的。<br>下面是一个例子，当浏览器加载URL<a href="http://localhost:3000/时，Node.js服务响应" target="_blank" rel="external">http://localhost:3000/时，Node.js服务响应</a> 字符串<strong>Hello Node</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line">	res.end(<span class="string">'Hello Node\n'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></p>
<p>上例中使用 了http模块.  这是一个CommonJS模块实现. Node可执行binary有多个已编译模块。内核模块在Node’s源码中定义，其位置在<strong>lib/</strong>文件夹下.传给<strong>require()</strong>的标识符代表的内核模块首先被加载。例如，<strong>require(‘http’)</strong>问题首先返回内建的HTTP模块，即使存在一个该名称的文件。<br>加载处理HTTP请求的模块后，创建一个服务器对象，使用函数<strong>server.on()</strong>监听<strong>request</strong>事件。当请求服务器端口3000的事件发生时，回调函数接收<strong>request</strong>和<strong>response</strong>参数。 在返回响应前，设置<strong>Content-Type</strong> 头和HTTP响应代码。将上面的代码保存为app.js，以命令行方式启动服务器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ » node app.js</span><br></pre></td></tr></table></figure></p>
<p>服务器启动完毕，在浏览器中打开<a href="http://localhost:3000，显示如下结果：" target="_blank" rel="external">http://localhost:3000，显示如下结果：</a><br><img src="/./img/1456370889201.png" alt="Alt text"></p>
<p>如果需要了解内部发生了什么，可按如下方式执行 <strong>curl</strong>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">~ » curl -v http://localhost:<span class="number">3000</span></span><br><span class="line">* Rebuilt URL to: http://localhost:<span class="number">3000</span>/</span><br><span class="line">* Trying ::<span class="number">1</span>…</span><br><span class="line">* Connected to localhost (::<span class="number">1</span>) port <span class="number">3000</span> (<span class="comment">#0)</span></span><br><span class="line">&gt; GET / HTTP/<span class="number">1.1</span></span><br><span class="line">&gt; Host: localhost:<span class="number">3000</span></span><br><span class="line">&gt; User-Agent: curl/<span class="number">7.43</span>.<span class="number">0</span></span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;&lt;</span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">&lt; Content-Type: text/plain</span><br><span class="line">&lt; Date: Thu, <span class="number">12</span> Nov <span class="number">2015</span> <span class="number">05</span>:<span class="number">31</span>:<span class="number">44</span> GMT</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Hello Node</span><br><span class="line">* Connection <span class="comment">#0 to host localhost left intact</span></span><br></pre></td></tr></table></figure></p>
<p>Curl显示了request (&gt;)和response (&lt;)对话过程，包括request和response headers.</p>
<h2 id="u56DE_u8C03"><a href="#u56DE_u8C03" class="headerlink" title="回调"></a>回调</h2><p>在Node里，所有的事件都是异步的，回调无需仔细设计。Node.js最重要的方面是代码组织和模块管理。<br>Callbacks是在以后的某个时间点异步执行的函数. 与从上到下的代码阅读顺序相反，异步程序基于顺序和速度在不同的时候点执行不同的函数. 函数是否顺序或异步执行取决于上下文环境：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(i);</span><br><span class="line">	i=i+num;</span><br><span class="line">&#125; </span><br><span class="line">add(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure></p>
<p>如果在Node里运行上面的代码，输出结果如下(假定文件名为app.js):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/Chapter9 » node app.js</span><br><span class="line"><span class="number">0</span> </span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure></p>
<p>这是传统的代码同步执行方式，一行接一行执行。 这是一种顺序控制流。当在其中引入I/O操作时，例如读文件或远程调用，Node会以异步方式执行。在下面的例子中，Node.js的模块<strong>request</strong>用于HTTP调用。该模块的安装方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install request</span><br></pre></td></tr></table></figure></p>
<p>看一下下面这个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">var</span> status = <span class="literal">undefined</span>;</span><br><span class="line">request(<span class="string">'http://google.com'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">		status_code = response.statusCode;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(status);</span><br></pre></td></tr></table></figure></p>
<p>当运行这个例子时，变量<strong>status</strong>的值仍然是<strong>undefined</strong>. 这里的HTTP调用是一个I/O操作，因此执行过程是异步的。虽然所有函数都是定义好的，但并不是全部立即执行的。<strong>request()</strong>函数被调用后，接着执行下一行代码。如果后面没有代码，Node或者等待I/O返回，或者退出。当<strong>request()</strong>完成其工作时，会调用回调函数 (这里的回调是一个匿名函数，是<strong>request()</strong>函数 的第二个参数). 输出<code>undefined</code>是因为，代码中没有让<code>console.log()</code>等待<strong>request()</strong>函数完成以从HTTP调用中获取信息。</p>
<p>回调函数在以后某个时间点执行这一特点，改变了代码组织方式。重新组织的要点如下：</p>
<ul>
<li>将异步代码打包在一个函数中</li>
<li>把回调函数传递给打包函数<br>按照这个思路，前例代码修改如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">var</span> status = <span class="literal">undefined</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSiteStatus</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">	request(<span class="string">'http://google.com'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, response, body</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">			status_code = response.statusCode;</span><br><span class="line">		&#125;</span><br><span class="line">		callback(status_code);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStatusCode</span>(<span class="params">status</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(status);</span><br><span class="line">&#125; </span><br><span class="line">getSiteStatus(showStatusCode);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>现在可以得到正确的输出结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$node</span> app.js</span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure></p>
<p>这里异步代码被打包到<strong>getSiteStatus()</strong>函数中，名称为<strong>callback()</strong>的函数作为这个函数的参数, <strong>callback()</strong>在<strong>getSiteStatus()</strong>的最后一行执行。<strong>showStatusCode()</strong>回调函数简单地将<code>console.log()</code>打包在内部。与回调编程有关的一个最重要的的概念是：<strong>函数是一等对象，可存储在变量中，可以不同名称传递</strong>。现在，在HTTP调用完成后，回调函数被调用, 得到变量<strong>status_code</strong>的值。存在这样的应用场景：仅在另一个异步任务完成后才执行一个异步任务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="keyword">function</span> (req, res) &#123;</span><br><span class="line">	getURL(url, <span class="keyword">function</span> (err, res) &#123;</span><br><span class="line">		getURLContent(res.data, <span class="keyword">function</span>(err,res) &#123;</span><br><span class="line">			...</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>如你所见，一个异步函数嵌套在另一个异步函数里。这样的嵌套使代码难以阅读和管理，通常被称为callback hell. 为了避免类似情况，在需要等待某些其他异步任务完成时，将代码放入被传递的回调函数，来表现这种依赖关系。另一点重要的是，命名函数而不是使用匿名函数作为回调。将上面那个例子重构后的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urlContentProcessor = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> urlResponseProcessor = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">	getURLContent(data,urlContentProcessor);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> createServer = <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">	getURL(url,urlResponseProcessor);</span><br><span class="line">&#125;;</span><br><span class="line">http.createServer(createServer);</span><br></pre></td></tr></table></figure></p>
<p>这里有两个重要的概念。首先，使用命名函数，并将其作为回调函数。其次，没有嵌套。<br>Callbacks在Node中经常用于定义一次性响应的业务逻辑。Node有专门对重复事件进行处理的机制。但首先要理解Node里的计时器和事件的概念。</p>
<h2 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h2><p>Timers用于在给定延迟后有计划地执行一个特定回调。有两种方式设定延迟执行：<strong>setTimeout</strong>和<strong>setInterval</strong>. <strong>setTimeout()</strong>用于在设定的延迟后执行一个回调,而<strong>setInterval</strong>用于周期性地重复执行回调。看一下下面这个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"This is just one time delay"</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> t = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	count++;</span><br><span class="line">	<span class="built_in">console</span>.log(count);</span><br><span class="line">	<span class="keyword">if</span> (count&gt; <span class="number">5</span>)&#123;</span><br><span class="line">		clearInteval(t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;, <span class="number">2000</span> );</span><br></pre></td></tr></table></figure></p>
<p>一开始，<strong>setTimeout()</strong>在延迟1000ms后执行一个异步回调函数. 这是一个一次性计划。重复执行则使用<strong>setInterval()</strong>. 注意，<strong>setInterval()</strong>返回变量<strong>t</strong>，在<strong>clearInterval()</strong>中通过这个引用清除该计划。</p>
<h2 id="EventEmitters"><a href="#EventEmitters" class="headerlink" title="EventEmitters"></a>EventEmitters</h2><p>EventEmitters用于响应重复事件。EventEmitters触发事件，包含事件处理能力。很多重要的Node APIs基于EventEmitters构建.<br>由EventEmitters引起的Events通过listeners处理. 一个listener就是关联到一个事件的回调函数。当事件触发时，关联的listener也被触发。事件的EventEmitter是一个类，用于提供接口一致性，以发送（触发）和绑定事件的回调。<br>作为风格传统，事件名称为camel-cased字串;但所有有效字串都可以作为事件名。<br>使用<code>require(&#39;events&#39;)</code>以访问<strong>EventEmitter</strong>类:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br></pre></td></tr></table></figure></p>
<p>当EventEmitter实例出错时，触发一个<code>error</code>事件。在Node.js中，<code>error</code>事件被特殊对待。如果不对其进行处理，程序会以异常堆栈退出。<br>EventEmitters在添加监听器时发送<code>newListener</code>事件，在移除监听器时发送<code>removeListener</code>事件。</p>
<p>为了理争EventEmitters, 下面搭建一个简单的telnet服务器，客户端可以登录并输入特定的命令，服务器返回相应的响应：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">var</span> _events = <span class="built_in">require</span> (<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">var</span> _emitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line">_emitter.on(<span class="string">'join'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">id,caller</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(id+<span class="string">" - joined"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">_emitter.on(<span class="string">'quit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">id,caller</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(id+<span class="string">" - left"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _server = _net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">caller</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> process_id = caller.remoteAddress + <span class="string">':'</span> + caller.remotePort;</span><br><span class="line">	_emitter.emit(<span class="string">'join'</span>,id,caller);</span><br><span class="line">	caller.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"disconnected"</span>);</span><br><span class="line">		_emitter.emit(<span class="string">'quit'</span>,id,caller);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">_server.listen(<span class="number">8124</span>);</span><br></pre></td></tr></table></figure></p>
<p>这个代码片段使用了Node中的<strong>net</strong>模块，服务器可以通过标准的<strong>telnet</strong>命令连接。当客户端连接时，服务器显示客户端地址和端口，客户端退出时，服务器也进行记录。当客户端连接时，触发<strong>join</strong>事件，断开时，触发<strong>quit</strong>事件。运行程序，并进行连接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet <span class="number">127.0</span>.<span class="number">0.1</span> <span class="number">8124</span></span><br></pre></td></tr></table></figure></p>
<p>在服务器控制台，日志输出如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">» node app.js</span><br><span class="line">::ffff:<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">51000</span> - joined</span><br><span class="line">::ffff:<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">51001</span> – joined</span><br></pre></td></tr></table></figure></p>
<p>退出时也会有相应的消息显示。</p>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>Node模块是CommonJS模块模式，通过<strong>Node Package Manager (npm)</strong>发布. </p>
<p>Node modules可以是单文件，也可以是包含一个或以上文件的路径。好的做法是建立独立的模块路径. 在模块路径下被评估的文件名为<strong>index.js</strong>. 模块路径的例子一般如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_project/src/<span class="tag">nav</span></span><br><span class="line">				--- &gt;index.js</span><br></pre></td></tr></table></figure></p>
<p>在计划路径下，<strong>nav</strong>模块路径包含模块代码。模块代码一般在index.js里—也可以改成其他文件。下面是geo.js这个小模块的例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exports.area = <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">3.14</span> * r * r;</span><br><span class="line">&#125;;</span><br><span class="line">exports.circumference = <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">3.14</span> * <span class="number">3.14</span> * r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>通过<code>exports</code>导出两个函数. <code>require</code>引入模块，以模块名或模块代码的系统路径为参数。<strong>geo.js</strong>的使用如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geo = <span class="built_in">require</span>(<span class="string">'./geo.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(geo.area(<span class="number">2</span>));</span><br></pre></td></tr></table></figure></p>
<p>除了导出的两个函数，其他都是私有的。Node使用CommonJS模式。还有另一种编写模块的的语法。使用<strong>modules.exports</strong>导出模块。当使用<strong>exports</strong>时, 被导出的模块属性被附加到<strong>modules.exports</strong>. 然而，如果<strong>modules.exports</strong>已经有属性附加过，由<strong>exports</strong>附加的属性被忽略。<br><strong>geo</strong>模块可重写以返回单个<strong>Geo</strong>构造函数，而不是包含函数的一个对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Geo = <span class="function"><span class="keyword">function</span>(<span class="params">PI</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.PI = PI;</span><br><span class="line">&#125; </span><br><span class="line">Geo.prototype.area = <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.PI * r * r;</span><br><span class="line">&#125;;</span><br><span class="line">Geo.prototype.circumference = <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.PI * <span class="keyword">this</span>.PI * r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = Geo;</span><br></pre></td></tr></table></figure></p>
<p>下面是一个<strong>config.js</strong>模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db_config = &#123;</span><br><span class="line">	server: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">	port: <span class="string">"3306"</span>,</span><br><span class="line">	user: <span class="string">"mysql"</span>,</span><br><span class="line">	password: <span class="string">"mysql"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.exports = db_config;</span><br></pre></td></tr></table></figure></p>
<p>如果从模块外部访问<strong>db_config</strong>，方法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(config.user);</span><br></pre></td></tr></table></figure></p>
<p>组织模块有三种方法：</p>
<ul>
<li>使用相对路径，例如<code>config = require(&#39;./lib/config.js&#39;)</code></li>
<li>使用绝对路径，例如<code>config = require(&#39;/nodeproject/lib/config.js&#39;)</code></li>
<li>使用模块查找，例如<code>config = require(&#39;config&#39;)</code></li>
</ul>
<p>第三种方式，Node会以标准的查找方式定位模块：从当前路径开始，添加<code>./node_modules/</code>，开始查找.如果没找到，则在上一层路径查找，直到系统根目录。<br>例如，<code>require(&#39;config&#39;)</code> 在<code>/projects/node/</code>下被调用, 下面是路搜索的顺序：</p>
<ul>
<li>/projects/node /node_modules/config.js</li>
<li>/projects/node_modules/config.js</li>
<li>/node_modules/config.js</li>
</ul>
<p>对于从npm下载的模块，这种方法相对简单。也可以在特定路径中组织模块，只要给Node提供入口.<br>最容易的方式是创建<code>./node_modules/supermodule/</code>路径，在这个路径下插入index.js文件。<strong>index.js</strong>被默认加载。<br>其他可行方式是，在<strong>mymodulename</strong>路径下放一个<strong>package.json</strong>文件，其中定义模块的名称和主文件：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	"<span class="attribute">name</span>": <span class="value"><span class="string">"supermodule"</span></span>,</span><br><span class="line">	"<span class="attribute">main</span>": <span class="value"><span class="string">"./lib/config.js"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>Node以对象方式缓存模块. 如果有两个以上文件请求同一个模块，第一个<strong>require</strong>在内存中缓存模块，第二个不需要从源码重新加载模块。但是，第二个<strong>require</strong>可以改变模块功能。这通常被叫做<br><strong>monkey patching</strong>，用于修改模块行为而实际改变原有模块。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u6D4F_u89C8_u5668_u4E2D_u7684_u5F02_u6B65_u4E8B_u4EF6_u6A21_u578B"><a href="#u6D4F_u89C8_u5668_u4E2D_u7684_u5F02_u6B65_u4E8B_u4EF6_u]]>
    </summary>
    
      <category term="Event" scheme="http://yoursite.com/tags/Event/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
      <category term="Timers" scheme="http://yoursite.com/tags/Timers/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript Patterns]]></title>
    <link href="http://yoursite.com/2016/02/24/Patterns/"/>
    <id>http://yoursite.com/2016/02/24/Patterns/</id>
    <published>2016-02-24T07:48:14.000Z</published>
    <updated>2016-02-24T08:02:08.316Z</updated>
    <content type="html"><![CDATA[<h1 id="JavaScript_Patterns"><a href="#JavaScript_Patterns" class="headerlink" title="JavaScript Patterns"></a>JavaScript Patterns</h1><p>当开始开发大的系统时，会遇到一些重复问题，可以用标准的方法来做。 模式可用来解决这类已知和可识别的问题。模式是解决常见问题的 最好实践、可用抽象或模板。编写可维护代码很难，写出模块化正确可维护代码的关键是：理解重复场景，用通用模板实现优化的解决方案。在设计模式中领域里，最重要的的书籍是Erich Gamma，Richard Helm, Ralph Johnson, and John Vlissides（著名的the Gang of Four  - GOF)所著的出版于1995年的<strong>Design Patterns: Elements Of Reusable Object-Oriented Software</strong>. 在这本开创性的著作中，正式命名了各种类型的模式，阐述了今天所见的大部分常见模式的实现细节。理解模式的重要性是非常重要的：</p>
<ul>
<li>Patterns提供了常见问题的已证明解决方案：Patterns提供了特定问题的优化模板。 这些模式背后有大量经验丰富的工程师支持，并经过实效检测。</li>
<li>Patterns被设计为可重用：它们足够通用，以适应问题的不同变化。</li>
<li>Patterns定义了词汇表：Patterns是精确定义的结构，因此提供了关于解决方案的通用词汇表。这对于大型团队的交流非常便利。<h2 id="u8BBE_u8BA1_u6A21_u5F0F"><a href="#u8BBE_u8BA1_u6A21_u5F0F" class="headerlink" title="设计模式"></a>设计模式</h2>在一般的软件开发周期里，存在劣质代码引入的可能性, 主要集中于代码临近发布时和交由其他团队维护时。如果这样的劣质设计结构记录为anti-patterns, 它们可以为开发人员提供指导，以确认避免哪些陷井和如何不继续劣质设计模式。大多数语言都有其自己的antipatterns集合.基于其解决的问题，设计模式被GOF分为几个大类：</li>
<li><strong>Creational design patterns</strong>:这类处理对象创建的不同机制。虽然大多数语言提供了基本的对象创建方法，但这类模式寻求优化的或可控性更强的对象创建机制。</li>
<li><strong>Structural design patterns</strong>: 这类模式与对象的组成成分及其之间关系有关。理念是当系统中的某些事情发生变化时，对全部的对象关系的影响最小。</li>
<li><strong>Behavioral design patterns</strong>: 这类模式专注于对象间的依赖与通信。</li>
</ul>
<p>下表是常见模式分类表：</p>
<ul>
<li>Creational patterns:<ul>
<li>Factory method</li>
<li>Abstract factory</li>
<li>Builder</li>
<li>Prototype</li>
<li>Singleton</li>
</ul>
</li>
<li>Structural patterns:<ul>
<li>Adapter</li>
<li>Bridge</li>
<li>Composite</li>
<li>Decorator</li>
<li>Façade</li>
<li>Flyweight</li>
<li>Proxy</li>
</ul>
</li>
<li>Behavioral patterns<ul>
<li>Interpreter</li>
<li>Template method</li>
<li>Chain of responsibility</li>
<li>Command</li>
<li>Iterator</li>
<li>Mediator</li>
<li>Memento</li>
<li>Observer</li>
<li>State</li>
<li>Strategy</li>
<li>Visitor</li>
</ul>
</li>
</ul>
<h2 id="The_namespace_pattern"><a href="#The_namespace_pattern" class="headerlink" title="The namespace pattern"></a>The namespace pattern</h2><p>过度使用全局域在JavaScript几乎是禁忌。命名空间可以减少全局域的数量，避免名称冲突或过度使用名称前缀。<br>命名空间就是为应用或库创建一个全局对象，把所有其他对象和方法添加到这个全局对象，而不是在一个全局域内使用它们。 JavaScript没有明确的命名空间语法，但可以很容易地创建命名空间：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BMW</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> engines = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> features = &#123;</span><br><span class="line">	seats: <span class="number">6</span>,</span><br><span class="line">	airbags:<span class="number">6</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>所有的东西都全局域内创建，这样是违反模式的，不是一个好做法。需要重构代码，创建一个单一对象，将所有函数和对象作为这个对象的一部分:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Single global object</span></span><br><span class="line"><span class="keyword">var</span> CARFACTORY = CARFACTORY || &#123;&#125;;</span><br><span class="line">CARFACTORY.Car = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">CARFACTORY.BMW = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">CARFACTORY.engines = <span class="number">1</span>;</span><br><span class="line">CARFACTORY.features = &#123;</span><br><span class="line">	seats: <span class="number">6</span>,</span><br><span class="line">	airbags:<span class="number">6</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>全局命名空间对象的名称一般是全部大写。对于限定全局域数量，增加命名空间来说，虽然这样看起来不错，但每个变量和函数前都加前缀显得有一点啰唆. 而且，单一全局实例意味着代码的任何部分都可以修改全局实例，同时其他部分的功能又可以获取更新的状态。这会引起非常麻烦的副作用。</p>
<p>上例中的<code>var CARFACTORY = CARFACTORY || {};</code>这一行代码显得有点奇怪。当开发大型软件时，不能假定某个命名空间是首次创建（或增加一个属性给这个命名空间）. 很有可能该命名空间已经有了。为确保该命名空间在不存在的条件下被创建， 要加入short-circuit ||操作符.</p>
<h2 id="The_module_pattern"><a href="#The_module_pattern" class="headerlink" title="The module pattern"></a>The module pattern</h2><p>模块化有助于保持代码的独立性和组织性。模块化将大程序分离为更小的代码段，并为其分配命名空间。这样的模块具有可重用性。精巧的模块接口设计使代码易于使用和扩展。<br>JavaScript函数和对象的灵活性很容易创建健壮的模块. 函数域可以使命名空间是模块内部的，对象可用于存储导出值的集合。</p>
<p>Object literals可以创建如下的name-value对.下面的例子创建了一个object literal并定义了key-value对，以创建属性和函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> basicServerConfig = &#123;</span><br><span class="line">	environment: <span class="string">"production"</span>,</span><br><span class="line">	startupParams: &#123;</span><br><span class="line">		cacheTimeout: <span class="number">30</span>,</span><br><span class="line">		locale: <span class="string">"en_US"</span></span><br><span class="line">	&#125;,</span><br><span class="line">	init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">"Initializing the server"</span> );</span><br><span class="line">	&#125;,</span><br><span class="line">	updateStartup: <span class="function"><span class="keyword">function</span>(<span class="params"> params </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.startupParams = params;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="keyword">this</span>.startupParams.cacheTimeout );</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="keyword">this</span>.startupParams.locale );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">basicServerConfig.init(); <span class="comment">//"Initializing the server"</span></span><br><span class="line">basicServerConfig.updateStartup(&#123;cacheTimeout:<span class="number">60</span>, locale:<span class="string">"en_UK"</span>&#125;); <span class="comment">//60,en_UK</span></span><br></pre></td></tr></table></figure></p>
<p>模块化模仿类的概念，包含公开/私有函数和变量，并限定它们的作用域为非全局的，防止命名冲突。另一个优点是，只暴露一个公开API.其它的内部实现在模块的闭包中是私有的。</p>
<p>与其它OO语言不同，JavaScript没有明确的access modifiers，因此没有privacy概念，也就是没有私有和公开变量的概念。在JavaScript中, 函数域用于强制实现这一概念。模块模式使用闭包以限定变量和函数只能在模块中被访问；但在返回对象中定义的变量和函数是公开的。</p>
<p>现在，把前面的例子变为模块-使用IIFE并返回模块的接口，即就是函数<strong>init</strong>和<strong>updateStartup</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> basicServerConfig = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> environment= <span class="string">"production"</span>;</span><br><span class="line">	startupParams= &#123;</span><br><span class="line">		cacheTimeout: <span class="number">30</span>,</span><br><span class="line">		locale: <span class="string">"en_US"</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log( <span class="string">"Initializing the server"</span> );</span><br><span class="line">		&#125;,</span><br><span class="line">		updateStartup: <span class="function"><span class="keyword">function</span>(<span class="params"> params </span>) </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.startupParams = params;</span><br><span class="line">			<span class="built_in">console</span>.log( <span class="keyword">this</span>.startupParams.cacheTimeout );</span><br><span class="line">			<span class="built_in">console</span>.log( <span class="keyword">this</span>.startupParams.locale );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">basicServerConfig.init(); <span class="comment">//"Initializing the server"</span></span><br><span class="line">basicServerConfig.updateStartup(&#123;cacheTimeout:<span class="number">60</span>, locale:<span class="string">"en_UK"</span>&#125;); <span class="comment">//60,en_UK</span></span><br></pre></td></tr></table></figure></p>
<p><strong>basicServerConfig</strong>是全局域中的一个模块。为确保模块不污染全局环境，需要创建模块的命名空间。 而且模块的重用性也需要保证，因此要避免命名冲突。对于<strong>basicServerConfig</strong>模块，下面的代码演示了如何创建命名空间：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Single global object</span></span><br><span class="line"><span class="keyword">var</span> SERVER = SERVER||&#123;&#125;;</span><br><span class="line">SERVER.basicServerConfig = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	Var environment= <span class="string">"production"</span>;</span><br><span class="line">	startupParams= &#123;</span><br><span class="line">		cacheTimeout: <span class="number">30</span>,</span><br><span class="line">		locale: <span class="string">"en_US"</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log( <span class="string">"Initializing the server"</span> );</span><br><span class="line">		&#125;,</span><br><span class="line">		updateStartup: <span class="function"><span class="keyword">function</span>(<span class="params"> params </span>) </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.startupParams = params;</span><br><span class="line">			<span class="built_in">console</span>.log( <span class="keyword">this</span>.startupParams.cacheTimeout );</span><br><span class="line">			<span class="built_in">console</span>.log( <span class="keyword">this</span>.startupParams.locale );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">SERVER.basicServerConfig.init(); <span class="comment">//"Initializing the server"</span></span><br><span class="line">SERVER.basicServerConfig.updateStartup(&#123;cacheTimeout:<span class="number">60</span>, locale:<span class="string">"en_UK"</span>&#125;);<span class="comment">//60, en_UK</span></span><br></pre></td></tr></table></figure></p>
<p>将模块与命名空间结合使用一般来说是好的方法，但并不是强制要求模块必须与命名空间关联。.</p>
<p>一种模块模式的变种可以克服原有模块模式的一些缺点。这种改进的变化模块模式，通常被称为<strong>revealing module pattern</strong> (<strong>RMP)</strong>.  <strong>RMP</strong> 由  <em>Christian Heilmann</em>首先推广. 他不喜欢在从一个函数中调用另一个公开函数或访问一个公开变量时必须用模块名称。另一个小问题是，在返回公开接口时必须使用<strong>object literal notation</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> modulePattern = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> privateOne = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">privateFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'privateFn called'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		publicTwo: <span class="number">2</span>,</span><br><span class="line">		publicFn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			modulePattern.publicFnTwo();</span><br><span class="line">		&#125;,</span><br><span class="line">		publicFnTwo:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			privateFn();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;();</span><br><span class="line">modulePattern.publicFn(); <span class="string">"privateFn called"</span></span><br></pre></td></tr></table></figure></p>
<p>上面的代码需要通过<strong>modulePattern</strong>的<strong>publicFn()</strong>调用<strong>publicFnTwo()</strong> . 此外，公开接口以<strong>object literal</strong>的方式返回. 在<strong>RMP</strong>后的主要概念是在私有域中定义所有成员，返回一个带有指针的匿名对象，这些指针指向需要被公开的私有函数。下面是将前例代码转换为<strong>RMP</strong>的例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> revealingExample = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> privateOne = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">privateFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'privateFn called'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> publicTwo = <span class="number">2</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">publicFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		publicFnTwo();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">publicFnTwo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		privateFn();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getCurrentState</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// reveal private variables by assigning public pointers</span></span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		setup:publicFn,</span><br><span class="line">		count:publicTwo,</span><br><span class="line">		increaseCount:publicFnTwo,</span><br><span class="line">		current:getCurrentState()</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">console</span>.log(revealingExample.current); <span class="comment">// 2</span></span><br><span class="line">revealingExample.setup(); <span class="comment">//privateFn called</span></span><br></pre></td></tr></table></figure></p>
<p>这种方式看起来更简洁，相比经典模式应作为首选模式。</p>
<p>目前有两种主要方法创建模块。一种被称为<strong>CommonJS modules</strong>，更适用于服务端JavaScript环境，如<strong>Node.js</strong>。一个<strong>CommonJS</strong>模块包含一个<strong>require()</strong>函数以接收模块名称并返回模块接口。<strong>CommonJS</strong>模块有两部分构成：首先是模块需暴露的变量和函数列表，当将一个变量或函数分配给变量<strong>module.exports</strong>时, 它会暴露给模块外部。其次是和模块用于导入其他模块输出的<strong>require()</strong>函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Add a dependency module</span></span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomString</span>(<span class="params">length, chars</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> randomBytes = crypto.randomBytes(length);</span><br><span class="line">	...</span><br><span class="line">	...</span><br><span class="line">&#125; <span class="comment">//Export this module to be available for other modules</span></span><br><span class="line"><span class="built_in">module</span>.exports=randomString;</span><br></pre></td></tr></table></figure></p>
<p><strong>CommonJS</strong>模块在服务端有<strong>Node.js</strong>支持，在浏览器有<strong>curl.js</strong>支持.</p>
<p>另一类风格的JavaScript模块被称为<strong>Asynchronous Module Definition (AMD)</strong>. <strong>AMD</strong>使用<code>define</code>函数定义模块。这个函数以模块名称和一个函数作为参数。当模块加载后，<strong>define</strong>函数以模块的接口为实参执行函数。<strong>AMD</strong>的目标在于异步加载模块及其依赖。<strong>define</strong>函数用于以下面的签名样式定义命名或未命名的模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">	module_id <span class="comment">/*optional*/</span>,</span><br><span class="line">	[dependencies] <span class="comment">/*optional*/</span>,</span><br><span class="line">	definition <span class="function"><span class="keyword">function</span> /*<span class="title">function</span> <span class="title">for</span> <span class="title">instantiating</span> <span class="title">the</span> <span class="title">module</span> <span class="title">or</span> <span class="title">object</span>*/</span><br><span class="line">);</span></span><br></pre></td></tr></table></figure></p>
<p>没有依赖关系的模块也可以简写为如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define(</span><br><span class="line">&#123;</span><br><span class="line">	add: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x + y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>下面代码演示了依赖两个其他模块的一个模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">define( <span class="string">"math"</span>,</span><br><span class="line">	<span class="comment">//dependency on these two modules</span></span><br><span class="line">	[<span class="string">"sum"</span>, <span class="string">"multiply"</span>],</span><br><span class="line">	<span class="comment">// module definition function</span></span><br><span class="line">	<span class="comment">// dependencies (foo and bar) are mapped to function parameters</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> (<span class="params"> sum, multiply </span>) </span>&#123;</span><br><span class="line">		<span class="comment">// return a value that defines the module export</span></span><br><span class="line">		<span class="comment">// (that is, the functionality we want to expose for consumption)</span></span><br><span class="line">		<span class="comment">// create your module here</span></span><br><span class="line">		<span class="keyword">var</span> math = &#123;</span><br><span class="line">			demo : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">				<span class="built_in">console</span>.log(sum.calculate(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">				<span class="built_in">console</span>.log(multiply.calculate(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	<span class="keyword">return</span> math;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>require</strong>模块的使用方法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">"math"</span>,<span class="string">"draw"</span>], <span class="function"><span class="keyword">function</span> (<span class="params"> math,draw </span>) </span>&#123;</span><br><span class="line">	draw<span class="number">.2</span>DRender(math.pi);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><strong>RequireJS</strong> (<a href="http://requirejs.org/docs/whyamd.html" target="_blank" rel="external">http://requirejs.org/docs/whyamd.html</a>) 是实现了AMD的模块loader之一。</p>
<h2 id="ES6_modules"><a href="#ES6_modules" class="headerlink" title="ES6 modules"></a>ES6 modules</h2><p>两种独立的模块系统和不同的module loaders有点难以掌握。ES6试图解决这一问题，模块标准化建议想保留<strong>CommonJS</strong>和<strong>AMD</strong>模块模式的各自优点。ES6 modules的语法与<strong>CommonJS</strong>相似，并且支持异步加载和可配置的模块加载：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//json_processor.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processJSON</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSiteContent</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> processJSON(url);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; getSiteContent &#125; <span class="keyword">from</span> <span class="string">"json_processor.js"</span>;</span><br><span class="line">content=getSiteContent(<span class="string">"http://google.com/"</span>);</span><br></pre></td></tr></table></figure></p>
<p>ES6 export以<strong>CommonJS</strong>类似的方式输出变量和函数。在导入时，使用<code>import</code>关键字定义引入的依赖模块。</p>
<h2 id="The_factory_pattern"><a href="#The_factory_pattern" class="headerlink" title="The factory pattern"></a>The factory pattern</h2><p>工厂模式也是一种常见的对象创建模式。它不需要constructors，而是提供一个接口以创建对象。根据传递给工厂的类型，工厂创建对应的对象。常见的实现方式是使用一个类，或者类的静态方法。这个类或方法的目的是：</p>
<ul>
<li>抽象出相似对象创建过程的重复操作</li>
<li>工厂的客户可在不知道对象创建内部过程的情况下创建对象<br>举例来说：</li>
<li>一个constructor, CarFactory()</li>
<li><strong>CarFactory</strong>的一个静态方法<strong>make()</strong>知道如何创建car类型的对象。</li>
<li>特定的car类型，如CarFactory.SUV, CarFactory.Sedan等等</li>
</ul>
<p>如果想要以如下方式使用<strong>CarFactory</strong>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> golf = CarFactory.make(<span class="string">'Compact'</span>);</span><br><span class="line"><span class="keyword">var</span> vento = CarFactory.make(<span class="string">'Sedan'</span>);</span><br><span class="line"><span class="keyword">var</span> touareg = CarFactory.make(<span class="string">'SUV'</span>);</span><br></pre></td></tr></table></figure></p>
<p>那么下面的实现方式是标准方式.：从编程角度讲，通过构造函数来创建特定类型的对象-<code>CarFactory[const].prototype = new CarFactory()</code>.这里将对象类型映射到了对应的构造函数。这种模式的实现有不同的变化：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Factory Constructor</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CarFactory</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">CarFactory.prototype.info = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"This car has "</span>+<span class="keyword">this</span>.doors+<span class="string">" doors and a "</span>+<span class="keyword">this</span>.engine_capacity+<span class="string">" liter engine"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// the static factory method</span></span><br><span class="line">CarFactory.make = <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> constr <span class="number">0</span>= type;</span><br><span class="line">	<span class="keyword">var</span> car;</span><br><span class="line">	CarFactory[constr].prototype = <span class="keyword">new</span> CarFactory();</span><br><span class="line">	<span class="comment">// create a new instance</span></span><br><span class="line">	car = <span class="keyword">new</span> CarFactory[constr]();</span><br><span class="line">	<span class="keyword">return</span> car;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CarFactory.Compact = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.doors = <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">this</span>.engine_capacity = <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line">CarFactory.Sedan = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.doors = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">this</span>.engine_capacity = <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line">CarFactory.SUV = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.doors = <span class="number">4</span>;</span><br><span class="line">	<span class="keyword">this</span>.engine_capacity = <span class="number">6</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> golf = CarFactory.make(<span class="string">'Compact'</span>);</span><br><span class="line"><span class="keyword">var</span> vento = CarFactory.make(<span class="string">'Sedan'</span>);</span><br><span class="line"><span class="keyword">var</span> touareg = CarFactory.make(<span class="string">'SUV'</span>);</span><br><span class="line">golf.info(); <span class="comment">//"This car has 4 doors and a 2 liter engine"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="The_mixin_pattern"><a href="#The_mixin_pattern" class="headerlink" title="The mixin pattern"></a>The mixin pattern</h2><p>多态可以显著减少代码中重复函数，有利于提高函数的可重用性。可将共享功能移植为多态，以减少重复行为，专注于实现差异化功能点。考虑这样一个场景，创建一个可被任何实例对象调用的定制logger。这个logger可以扩展为多态方式使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Implement BasicServer that does the bare minimum</span></span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="comment">//Shared functionality encapsulated into a CustomLogger</span></span><br><span class="line"><span class="keyword">var</span> logger = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> CustomLogger = &#123;</span><br><span class="line">		log: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(message);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> CustomLogger;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//An object that will need the custom logger to log system specific logs</span></span><br><span class="line"><span class="keyword">var</span> Server = (<span class="function"><span class="keyword">function</span> (<span class="params">Logger</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> CustomServer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.log(<span class="string">"Initializing Server…"</span>);</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// This copies/extends the members of the 'CustomLogger' into 'CustomServer'</span></span><br><span class="line">	_.extend(CustomServer.prototype, Logger);</span><br><span class="line">	<span class="keyword">return</span> CustomServer;</span><br><span class="line">&#125;(logger));</span><br><span class="line">(<span class="keyword">new</span> Server()).init(); <span class="comment">//Initializing Server…</span></span><br></pre></td></tr></table></figure></p>
<p><code>_.extend</code>来自于<strong>Underscore.js</strong>, 用于把源<strong>(Logger)</strong>的所有属性复制到目的<strong>(CustomServer.prototype)</strong>. 在上面的例代码中，创建了一个共享对象<strong>CustomLogger</strong>, 其功能被所有对象实例共享。.这样一个对象就是<strong>CustomServer</strong>—在它的<strong>init()</strong>方法中，调用了这个定制logger的<strong>log()</strong>方法。<strong>CustomServer</strong>可以调用<strong>log()</strong>方法，是因为<strong>CustomLogger</strong>是通过Underscore的 <strong>extend()</strong>扩展而来的.可以动态地增加多态的功能给一个消费者对象。多态与继承是有区别的，这一点很重要。当多个对象和类层级共享功能时使用多态。如果在单一类层级里共享功能，则使用继承。在原型继承中，当继承一个原型时，对原型的任何改变会影响到所有的继承。如果不需要这样的效果，应该使用多态。</p>
<h2 id="The_decorator_pattern"><a href="#The_decorator_pattern" class="headerlink" title="The decorator pattern"></a>The decorator pattern</h2><p>装饰模式背后的概念是从一个只有基本功能的简单对象开始设计。随着设计的演进，使用已有的修饰符增强这个简单对象。在OO特别是Java的世界里，这种方式很常见。下面是一个具有简单服务器功能的BasicServer例子. 这些基本功能可被修饰后用于特定目的。设计的服务器用于PHP和Node.js，以两个端口提供服务。对基本服务器增加不同的功能进行修饰：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> phpServer = <span class="keyword">new</span> BasicServer();</span><br><span class="line">phpServer = phpServer.decorate(<span class="string">'reverseProxy'</span>);</span><br><span class="line">phpServer = phpServer.decorate(<span class="string">'servePHP'</span>);</span><br><span class="line">phpServer = phpServer.decorate(<span class="string">'80'</span>);</span><br><span class="line">phpServer = phpServer.decorate(<span class="string">'serveStaticAssets'</span>);</span><br><span class="line">phpServer.init();</span><br></pre></td></tr></table></figure></p>
<p>Node.js版本的服务器如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nodeServer = <span class="keyword">new</span> BasicServer();</span><br><span class="line">nodeServer = nodeServer.decorate(<span class="string">'serveNode'</span>);</span><br><span class="line">nodeServer = nodeServer.decorate(<span class="string">'3000'</span>);</span><br><span class="line">nodeServer.init();</span><br></pre></td></tr></table></figure></p>
<p>在JavaScript中，修饰模式的实现有几种方式。一种方式是通过列表实现，而不是依赖于继承和方法调用链：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BasicServer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.pid = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Initializing basic Server"</span>);</span><br><span class="line">	<span class="keyword">this</span>.decorators_list = []; <span class="comment">//Empty list of decorators</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//List of all decorators</span></span><br><span class="line">BasicServer.decorators = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Add each decorator to the list of BasicServer's decorators</span></span><br><span class="line"><span class="comment">//Each decorator in this list will be applied on the BasicServer instance</span></span><br><span class="line">BasicServer.decorators.reverseProxy = &#123;</span><br><span class="line">	init: <span class="function"><span class="keyword">function</span>(<span class="params">pid</span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"Started Reverse Proxy"</span>);</span><br><span class="line">			<span class="keyword">return</span> pid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">BasicServer.decorators.servePHP = &#123;</span><br><span class="line">	init: <span class="function"><span class="keyword">function</span>(<span class="params">pid</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"Started serving PHP"</span>);</span><br><span class="line">		<span class="keyword">return</span> pid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">BasicServer.decorators.serveNode = &#123;</span><br><span class="line">	init: <span class="function"><span class="keyword">function</span>(<span class="params">pid</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"Started serving Node"</span>);</span><br><span class="line">		<span class="keyword">return</span> pid + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Push the decorator to this list everytime decorate() is called</span></span><br><span class="line">BasicServer.prototype.decorate = <span class="function"><span class="keyword">function</span>(<span class="params">decorator</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.decorators_list.push(decorator);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//init() method looks through all the applied decorators on BasicServer</span></span><br><span class="line"><span class="comment">//and executes init() method on all of them</span></span><br><span class="line">BasicServer.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> running_processes = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> pid = <span class="keyword">this</span>.pid;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.decorators_list.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">		decorator_name = <span class="keyword">this</span>.decorators_list[i];</span><br><span class="line">		running_processes = BasicServer.decorators[decorator_name].init(pid);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> running_processes;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create server to serve PHP</span></span><br><span class="line"><span class="keyword">var</span> phpServer = <span class="keyword">new</span> BasicServer();</span><br><span class="line">phpServer.decorate(<span class="string">'reverseProxy'</span>);</span><br><span class="line">phpServer.decorate(<span class="string">'servePHP'</span>);</span><br><span class="line">total_processes = phpServer.init();</span><br><span class="line"><span class="built_in">console</span>.log(total_processes);</span><br><span class="line"><span class="comment">//Create server to serve Node</span></span><br><span class="line"><span class="keyword">var</span> nodeServer = <span class="keyword">new</span> BasicServer();</span><br><span class="line">nodeServer.decorate(<span class="string">'serveNode'</span>);</span><br><span class="line">nodeServer.init();</span><br><span class="line">total_processes = phpServer.init();</span><br><span class="line"><span class="built_in">console</span>.log(total_processes);</span><br></pre></td></tr></table></figure></p>
<p><strong>BasicServer.decorate()</strong>和<strong>BasicServer.init()</strong>是实际的完成功能的方法。，所有的decorators被添加到<br><strong>BasicServer</strong>的decorators列表. 在<strong>init()</strong>方法中， 执行列表中的每个decorator’s init()方法。这种不需要继承的方式较为简洁，由<em>Stoyan Stefanov</em>在其著作<strong>JavaScript Patterns, O’Reilly Media</strong>中提出。由于其简洁，因此在JavaScript的开发中具有突出地位。</p>
<h2 id="The_observer_pattern"><a href="#The_observer_pattern" class="headerlink" title="The observer pattern"></a>The observer pattern</h2><p>首先看一下与语言无关的关于<strong>观察者模式</strong>的定义。在GOF的<strong>Design Patterns: Elements of Reusable Object-Oriented Software</strong>中, 观察者模式的定义如下：</p>
<p><em>一个或多个观察者对被观察者的状态感兴趣，通过将其本身附加到被观察者以注册兴趣。当被观察者发生观察者感兴趣的变化时，通知消息被发送以调用每个观察者的更新方法。当观察者不再有兴趣时，与被观察者分离就可以 了。</em></p>
<p>在观察者设计模式中，被观察者保留一个对象（观察者）列表，并根据列表在状态发生变化时进行通知。被观察者通过广播通知观察者。观察者在不再想被通知时将其从列表中删除。基于上述理解，观察者模式中参与角色可以进行 如下定义：</p>
<ul>
<li><strong>Subject</strong>: 维护观察者列表，拥有添加、删除和更新观察者的方法</li>
<li><strong>Observer</strong>: 提供当状态发生变化时被通知对象的接收接口</li>
</ul>
<p>下面的例子创建了一个被观察者，可以增加、删除和通知观察者：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Subject = ( <span class="function"><span class="keyword">function</span>(<span class="params"> </span>) </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Subject</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.observer_list = [];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// this method will handle adding observers to the internal list</span></span><br><span class="line">	Subject.prototype.add_observer = <span class="function"><span class="keyword">function</span> (<span class="params"> obj </span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'Added observer'</span> );</span><br><span class="line">		<span class="keyword">this</span>.observer_list.push( obj );</span><br><span class="line">	&#125;;</span><br><span class="line">	Subject.prototype.remove_observer = <span class="function"><span class="keyword">function</span> (<span class="params"> obj </span>) </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.observer_list.length; i++ ) &#123;</span><br><span class="line">			<span class="keyword">if</span>( <span class="keyword">this</span>.observer_list[ i ] === obj ) &#123;</span><br><span class="line">				<span class="keyword">this</span>.observer_list.splice( i, <span class="number">1</span> );</span><br><span class="line">				<span class="built_in">console</span>.log( <span class="string">'Removed Observer'</span> );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	Subject.prototype.notify = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call( <span class="built_in">arguments</span>, <span class="number">0</span> );</span><br><span class="line">		<span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="keyword">this</span>.observer_list.length; i++ ) &#123;</span><br><span class="line">			<span class="keyword">this</span>.observer_list[i].update(args);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> Subject;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p>
<p>上面是直观的被观察者实现方式。重点是<strong>notify()</strong>方法中，所有观察者对象的<strong>update()</strong>方法通过广播更新的方式调用。<br>接着定义一个简单对象以创建随机tweets. 这个对象提供接口以增加和删除被观察者的观察者对象，即<strong>addObserver()</strong>和<strong>removeObserver()</strong>方法。这个对象也以新获取tweet调用被观察者的<strong>notify()</strong>方法. 当上述情况发生时，所有观察者将广播新tweet已更新，并将新tweet作为参数传递：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tweeter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> subject = <span class="keyword">new</span> Subject();</span><br><span class="line">	<span class="keyword">this</span>.addObserver = <span class="function"><span class="keyword">function</span> (<span class="params"> observer </span>) </span>&#123;</span><br><span class="line">		subject.add_observer( observer );</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">this</span>.removeObserver = <span class="function"><span class="keyword">function</span> (<span class="params">observer</span>) </span>&#123;</span><br><span class="line">		subject.remove_observer(observer);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">this</span>.fetchTweets = <span class="function"><span class="keyword">function</span> <span class="title">fetchTweets</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">// tweet</span></span><br><span class="line">		<span class="keyword">var</span> tweet = &#123;</span><br><span class="line">			tweet: <span class="string">"This is one nice observer"</span></span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="comment">// notify our observers of the stock change</span></span><br><span class="line">		subject.notify( tweet );</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接着加入两个观察者：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TweetUpdater = &#123;</span><br><span class="line">	update : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'Updated Tweet - '</span>, <span class="built_in">arguments</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> TweetFollower = &#123;</span><br><span class="line">	update : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( <span class="string">'"Following this tweet - '</span>, <span class="built_in">arguments</span> );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>两个观察者都有一个<strong>update()</strong>方法被<strong>Subject.notify()</strong>方法调用。现在可以通过<strong>Tweeter</strong>接口将观察者添加到被观察者：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tweetApp = <span class="keyword">new</span> Tweeter();</span><br><span class="line">tweetApp.addObserver( TweetUpdater );</span><br><span class="line">tweetApp.addObserver( TweetFollower );</span><br><span class="line">tweetApp.fetchTweets();</span><br><span class="line">tweetApp.removeObserver(TweetUpdater);</span><br><span class="line">tweetApp.removeObserver(TweetFollower);</span><br></pre></td></tr></table></figure></p>
<p>输出结果如下:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Added observer</span><br><span class="line">Added observer</span><br><span class="line">Updated Tweet - &#123; '0': [ &#123; tweet: 'This is one nice observer' &#125; ] &#125; "Following this tweet - &#123; '0': [ &#123; tweet: 'This is one nice observer' &#125; ]</span><br><span class="line">&#125; </span><br><span class="line">Removed Observer</span><br><span class="line">Removed Observer</span><br></pre></td></tr></table></figure></p>
<h1 id="JavaScript_Model-View-*_patterns"><a href="#JavaScript_Model-View-*_patterns" class="headerlink" title="JavaScript Model-View-* patterns"></a>JavaScript Model-View-* patterns</h1><p><strong>Model-View-Controller (MVC)</strong>, <strong>Model-View-Presenter (MVP)</strong>, 和<strong>Model-View-ViewModel (MVVM)</strong>是服务器端比较流行，在JavaScript应用中也开始广泛出现，以搭建和管理大型计划。许多支持MV*模式的JavaScript框架也出现了。这里讨论一下<strong>Backbone.js</strong>.</p>
<h2 id="Model-View-Controller"><a href="#Model-View-Controller" class="headerlink" title="Model-View-Controller"></a>Model-View-Controller</h2><p><strong>MVC</strong>是流行的构建模式，主要思想是将应用分为三部分，从而将信息的内部表现从表现层分离。<strong>MVC</strong>由组件构成：<strong>model</strong>是应用对象，<strong>view</strong>是底层model对象的表现，<strong>controller</strong>根据用户交互控制接口行为。</p>
<h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><p><strong>Models</strong>是应用里表现数据的结构，对用户接口和流程逻辑一无所知。对models的改变，以观察者设计模式被通知给view层。Models可以包含验证、创建和删除数据的代码。在数据变化时自动通知views以响应的能力使用类似于<strong>Backbone.js</strong>、<strong>Amber.js</strong>等框架，在创建MV<em>应用时有用。下例是典型的<em>*Backbone model</em></em>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EmployeeModel = Backbone.Model.extend(&#123;</span><br><span class="line">	url: <span class="string">'/employee/1'</span>,</span><br><span class="line">	defaults: &#123;</span><br><span class="line">		id: <span class="number">1</span>,</span><br><span class="line">		name: <span class="string">'John Doe'</span>,</span><br><span class="line">		occupation: <span class="literal">null</span></span><br><span class="line">	&#125;</span><br><span class="line">	initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">var</span> JohnDoe = <span class="keyword">new</span> EmployeeModel();</span><br></pre></td></tr></table></figure></p>
<p>这类model的结构在不同框架里会有变化，但是它们有共性。.在实际应用中，model常被放在内存store或database以保持一致性.</p>
<h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><p>Views 是model的可见表现. 通常，model的状态在被views层表现前经过处理、过滤和修饰。在JavaScript里，views负责渲染和操作DOM元素。Views观察models，在其发生变化时被通知。当用户与view交互时, model的特定属性通过view层改变(一般通过controllers). 在JavaScript框架如Backbone中,views由模板引擎创建，如<strong>Handlebar.js</strong> <a href="http://handlebarsjs.com/" target="_blank" rel="external">http://handlebarsjs.com/</a>) 或<strong>mustache.js</strong>(<a href="https://mustache.github.io/" target="_blank" rel="external">https://mustache.github.io/</a>). 这些模板本身不是views. 它们观察models，并根据变化更新其状态。下面是一个<strong>Handlebar</strong>中view定义的例子：<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"employee_photo"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">h2</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">img</span> <span class="attribute">class</span>=<span class="value">"emp_headshot_small"</span> <span class="attribute">src</span>=<span class="value">"&#123;&#123;src&#125;&#125;"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"employee_details"</span>&gt;</span></span><br><span class="line">		&#123;&#123;employee_details&#125;&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>类似上例中的这些Views，包含有模板变量的markup tags.这些变量由特定的语法限定。<br>例如，在<strong>Handlebar.js</strong>中，模板变量由<code>\{\{ \}\}</code> 限定。框架一般以JSON形式传递数据。 怎样由model构成view, 由框架透明地处理。</p>
<h2 id="Controllers"><a href="#Controllers" class="headerlink" title="Controllers"></a>Controllers</h2><p>Controllers作为models和views的中间层，负责在用户改变view属性时更新model。大多数t JavaScript框架对经典定义进行了变化。例如，<strong>Backbone</strong>没有叫做controller的概念，但有router负责处理流程逻辑。可以认为view和router的组合是一个controller，因为许多同步models和views逻辑是在view本身完成的。典型的<strong>Backbone router</strong>看起来如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EmployeeRouter = Backbone.Router.extend(&#123;</span><br><span class="line">	routes: &#123; <span class="string">"employee/:id"</span>: <span class="string">"route"</span> &#125;,</span><br><span class="line">	route: <span class="function"><span class="keyword">function</span>(<span class="params"> id </span>) </span>&#123;</span><br><span class="line">		...view render logic…</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="The_Model-View-Presenter_pattern"><a href="#The_Model-View-Presenter_pattern" class="headerlink" title="The Model-View-Presenter pattern"></a>The Model-View-Presenter pattern</h2><p>Model-View-Presenter是原有MVC模式的一种变化。MVC和MVP的目标都是关注点分离，但在许多基础层面有差异。MVP中的presenter有必要的view逻辑。任何来自view的调用被委托给presenter. presenter同时观察model，并在其更新时更新views。许多人认为，由于presenter绑定了views与model, 它也发挥了传统controller的作用。MVP的实现有多种方式，但没有框架提供可用的经典MVP。以下是在MVP的不同实现里，区别于MVC的主要特点:</p>
<ul>
<li>view没有对model的引用</li>
<li>presenter有对model的引用，并负责在模块变化时更新视图<br>MVP常见的两种实现风格：</li>
<li>Passive view: view尽可能简洁，所有业务逻辑在presenter里. 例如，一个普通的Handlebars模板就是一个passive view.</li>
<li>Supervising controller: Views通过包含声明逻辑。presenter在view中的简单声明逻辑不够用时进行接管。<br>下图描述了MVP架构。<br><img src="/./img/1456298832886.png" alt="Alt text"></li>
</ul>
<h2 id="Model-View-ViewModel"><a href="#Model-View-ViewModel" class="headerlink" title="Model-View-ViewModel"></a>Model-View-ViewModel</h2><p>MVVM由Microsoft为Windows Presentation Foundation (WPF) 和Silverlight而创造. MVVM是MVC和MVP 变化形式，进一步尝试从业务模型和应用行为剥离用户界面(view)。MVVM创建了一个新的model层，作为MVC和MVP中domain model的附加。这个model层添加属性以作为视图的接口。例如，在UI里有一个核选框，它的状态由<strong>IsChecked</strong>捕获。在MVP里，视图拥有这个属性，而presenter设置这个属性。但在 MVVM里, presenter拥有IsChecked属性，视图负责进行同步。 presenter不再做Classical presenter的工作, 因此被称作ViewModel:<br><img src="/./img/1456299352133.png" alt="Alt text"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="JavaScript_Patterns"><a href="#JavaScript_Patterns" class="headerlink" title="JavaScript Patterns"></a>JavaScript Patterns</h1><p>当开]]>
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Pattern" scheme="http://yoursite.com/tags/Pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Closures]]></title>
    <link href="http://yoursite.com/2016/02/22/Closures/"/>
    <id>http://yoursite.com/2016/02/22/Closures/</id>
    <published>2016-02-22T03:45:54.000Z</published>
    <updated>2016-02-22T04:00:08.344Z</updated>
    <content type="html"><![CDATA[<h1 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h1><p>按传统来说，闭包closures一直是纯函数编程语言的一个特征。Javascript具有这类函数式编程语言的亲和关系<br>，将闭包考虑进语言的核心构造。闭包在主流库的通用性越来越高，因为使用闭包可以简化操作的复杂性。</p>
<p>首要的认识是，闭包在JavaScript随处可见。词法scope 本质上决定了在哪里和怎样对标识符进行声明，和如何在执行过程中进行查找。</p>
<p>简而言之，闭包是在函数被声明时被创建的一个scope ，函数可以访问并操作这个函数的外部变量. 换句话说，当函数本身被声明时，闭包允许函数访问所有在scope中的变量， 和其他函数一样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = <span class="string">'I am outer'</span>; <span class="comment">//Define a value in global scope</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFn</span>(<span class="params"></span>) </span>&#123; <span class="comment">//Declare a a function in global scope</span></span><br><span class="line">	<span class="built_in">console</span>.log(outer);</span><br><span class="line">&#125; </span><br><span class="line">outerFn(); <span class="comment">//prints - I am outer</span></span><br></pre></td></tr></table></figure></p>
<p>好像没有什么奇怪的地方，但这是闭包最普通的情况：变量和函数都在全局域中声明。在函数中，可以访问全局域（<strong>outer外部</strong>）中的变量。 因此本质上，函数<strong>outerFn()</strong>的外部域是一个闭包，对<strong>outerFn()</strong>总是可见的。下面是一个更复杂一些的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer = <span class="string">'Outer'</span>; <span class="comment">//Variable declared in global scope</span></span><br><span class="line"><span class="keyword">var</span> copy;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFn</span>(<span class="params"></span>)</span>&#123; <span class="comment">//Function declared in global scope</span></span><br><span class="line">	<span class="keyword">var</span> inner = <span class="string">'Inner'</span>; <span class="comment">//Variable has function scope only, can not be</span></span><br><span class="line">	<span class="comment">//accessed from outside</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">innerFn</span>(<span class="params"></span>)</span>&#123; <span class="comment">//Inner function within Outer function,</span></span><br><span class="line">		<span class="comment">//both global context and outer</span></span><br><span class="line">		<span class="comment">//context are available hence can access</span></span><br><span class="line">		<span class="comment">//'outer' and 'inner'</span></span><br><span class="line">		<span class="built_in">console</span>.log(outer);</span><br><span class="line">		<span class="built_in">console</span>.log(inner);</span><br><span class="line">	&#125;</span><br><span class="line">	copy=innerFn; <span class="comment">//Store reference to inner function,</span></span><br><span class="line">	<span class="comment">//because 'copy' itself is declared</span></span><br><span class="line">	<span class="comment">//in global context, it will be available</span></span><br><span class="line">	<span class="comment">//outside also</span></span><br><span class="line">&#125; </span><br><span class="line">outerFn();</span><br><span class="line">copy(); <span class="comment">//Cant invoke innerFn() directly but can invoke via a</span></span><br><span class="line"><span class="comment">//variable declared in global scope</span></span><br></pre></td></tr></table></figure></p>
<p>在<strong>innerFn()</strong>中, 变量<strong>outer</strong>由于是全局域的因此可以访问。 内部函数的执行是在外部函数已执行后：将内部函数的引用复制给一个全局域变量<strong>copy</strong>. 当<strong>innerFn()</strong>执行时，<strong>outerFn()</strong>函数的域已经消失了，当通过<strong>copy</strong>变量调用时是不可见的。那么，下面的代码会出错吗？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(inner);</span><br></pre></td></tr></table></figure></p>
<p>变量<strong>inner</strong>应该是<strong>undefined</strong>吗? 但是，前面代码的实际输出是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Outer"</span></span><br><span class="line"><span class="string">"Inner"</span></span><br></pre></td></tr></table></figure></p>
<p>为什么在执行<strong>innerFn()</strong>时，变量<strong>inner</strong>仍然可见，理论上函数的的作用域早已没有了？当在<strong>outerFn()</strong>中声明<strong>innerFn()</strong>时，不仅声明了函数定义，同时也形成了一个不仅包含函数声明，而且还包含有在函数声明的那一点的当时所有变量的闭包。当执行<strong>innerFn()</strong>时，即使声明它的作用域已经消失，它仍可通过闭包来访问原有的它被声明时的作用域.</p>
<p>进一步扩展上面的例子，看看闭包的能力：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> outer=<span class="string">'outer'</span>;</span><br><span class="line"><span class="keyword">var</span> copy;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> inner=<span class="string">'inner'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">innerFn</span>(<span class="params">param</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(outer);</span><br><span class="line">		<span class="built_in">console</span>.log(inner);</span><br><span class="line">		<span class="built_in">console</span>.log(param);</span><br><span class="line">		<span class="built_in">console</span>.log(magic);</span><br><span class="line">	&#125;</span><br><span class="line">	copy=innerFn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(magic); <span class="comment">//ERROR: magic not defined</span></span><br><span class="line"><span class="keyword">var</span> magic=<span class="string">"Magic"</span>;</span><br><span class="line">outerFn();</span><br><span class="line">copy(<span class="string">"copy"</span>);</span><br></pre></td></tr></table></figure></p>
<p>如上，首先给<strong>innerFn()</strong>增加了一个形参，以演示形参也是闭包的一部分。这里有两点很重要：</p>
<ul>
<li>所有外部域的变量都包含在闭包中，即使变量是在函数之后被声明。因此<strong>innerFn()</strong>函数中的<code>console.log(magic)</code>正常执行。</li>
<li>但全局域中同样的代码行<code>console.log(magic)</code>将会出错，因为在同一域中，未被定义的变量不能被引用。</li>
</ul>
<p>下面讨论一些闭包的常见使用场景。</p>
<h2 id="u8BA1_u65F6_u5668_u4E0E_u56DE_u8C03"><a href="#u8BA1_u65F6_u5668_u4E0E_u56DE_u8C03" class="headerlink" title="计时器与回调"></a>计时器与回调</h2><p>在实现计时器或回调函数时，多数情况下，需要在之后的某个时间点异步调用处理程序。因为是异步调用，需要从函数的外部域中访问变量，参考下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">	setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">timerFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( message );</span><br><span class="line">	&#125;, <span class="number">1000</span> );</span><br><span class="line">&#125; </span><br><span class="line">delay( <span class="string">" Hello World"</span> );</span><br></pre></td></tr></table></figure></p>
<p><strong>timerFn()</strong>函数被传递给内置库函数<strong>setTimeout()</strong>. 但<strong>timerFn()</strong>函数有一个在函数<strong>delay()</strong>之上的作用域闭包，因此可以引用变量<strong>message</strong>.</p>
<h2 id="Private_variables"><a href="#Private_variables" class="headerlink" title="Private variables"></a>Private variables</h2><p>闭包常用于封装信息以作为私有变量。JavaScript不允许封装，但通过闭包可以实现同样的效果：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">privateTest</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> points=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">this</span>.getPoints=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> points;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">this</span>.score=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		points++;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> private = <span class="keyword">new</span> privateTest();</span><br><span class="line">private.score();</span><br><span class="line"><span class="built_in">console</span>.log(private.points); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(private.getPoints());</span><br></pre></td></tr></table></figure></p>
<p>上例中的函数被作为构造函数创建，在<strong>privateTest()</strong>函数中，变量<strong>var points=0</strong>作为函数域内的变量，只能在<strong>privateTest()</strong>函数内被访问. 此外，还创建了一个访问器（<strong> accessor</strong>）函数（也叫做<strong>getter</strong>）—<strong>getPoints()</strong>—这个方法可以从<strong>privateTest()</strong>函数外部读取变量<strong>points</strong>, 这样变量就是函数私有的。另一个方法<strong>score()</strong>, 可以从<strong>privateTest()</strong>函数外部改变变量<strong>points</strong>的值。这样就可以对私有变量进行控制。<br>这种模式在编写基于约定和预定义接口的变量访问库代码时非常有用。</p>
<h2 id="Loops_and_closures"><a href="#Loops_and_closures" class="headerlink" title="Loops and closures"></a>Loops and closures</h2><p>看一下下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">	setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( i );</span><br><span class="line">	&#125;, i*<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个代码段会在终端里以100毫秒的间隔打印输出1, 2, 3, 4, and 5，对吗？实际上，代码会打印6, 6, 6, 6, and 6.这是闭包与循环经常会遇到的一个问题。变量<strong>i</strong>在函数域完结之后被更新。这意味着每个限定域的函数处理器<strong>handler</strong>总是会打印最后存储在<strong>i</strong>中的值。实际上，<strong>timeout</strong>回调函数是在循环完成后执行的。如果在循环中以这种方式调用函数，<strong>JSLint</strong>会警告这种常见问题。</p>
<p>怎么样解决呢？可以引入函数域并在其中copy一个<strong>i</strong>的变量，如下面的例子那样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>)</span>&#123;</span><br><span class="line">		setTimeout( <span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log( j );</span><br><span class="line">		&#125;, j*<span class="number">100</span>);</span><br><span class="line">	&#125;)( i );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在代码中，变量<strong>i</strong>的值被复制到IIFE的变量<strong>j</strong>，在每个循环轮次里，引入的IIFE创建了一个新域，从而以正确的值更新了当前的复本。</p>
<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>模块用于模仿类，专注于变量和函数的公开和私有访问实现。模块有助于防止全局变量污染。有效地使用模块可以在大段代码情况下减少命名冲突 。模块的典型格式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Var moduleName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">//private state</span></span><br><span class="line">	<span class="comment">//private functions</span></span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		<span class="comment">//public state</span></span><br><span class="line">		<span class="comment">//public variables</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这种模式必须满足两个条件：</p>
<ul>
<li>必须有一个外部封闭函数，且保证被至少执行一次。</li>
<li>这个外部封闭函数必须返回至少一个内部函数。这对于在私有状态上生成闭包是必须的-不这样做，私有状态不能被访问。.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> superModule = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> secret = <span class="string">'supersecretkey'</span>;</span><br><span class="line">	<span class="keyword">var</span> passcode = <span class="string">'nuke'</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getSecret</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( secret );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getPassCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( passcode );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		getSecret: getSecret,</span><br><span class="line">		getPassCode: getPassCode</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">superModule.getSecret();</span><br><span class="line">superModule.getPassCode();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>上面的例子满足这两个条件。首先，创建了一个IIFE或命名函数以作为外部函数。其中定义的变量是私有的，因为它们在函数的作用域内。返回的公开函数确保在私有域上有闭包。在模块中使用IIFE实际会导致函数单次执行。如果要多次执行，创建命名的函数表达式作为模块的一部分就可以了。</p>
<h2 id="u683C_u5F0F_u4E0A_u7684_u8003_u8651"><a href="#u683C_u5F0F_u4E0A_u7684_u8003_u8651" class="headerlink" title="格式上的考虑"></a>格式上的考虑</h2><p>综上，可以总结出一些常见的模式（作为常见可行的指导原则而不是必须遵守的规则）：</p>
<ul>
<li><p>使用函数声明而不是函数表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>永远不要在一个非函数代码块中声明函数(if, while等等). 要将函数赋值给变量. 虽然浏览器允许在非函数代码块中声明函数，但解析方式是不一样的。</p>
</li>
<li>Never name a parameter <strong>arguments</strong>. This will take precedence over the <strong>arguments</strong> object that is given to every function scope</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h1><p>按传统来说，闭包closures一直是纯函数编程语言的一个特征。Javascript具有这类]]>
    </summary>
    
      <category term="Closure" scheme="http://yoursite.com/tags/Closure/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[匿名函数]]></title>
    <link href="http://yoursite.com/2016/02/19/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/02/19/匿名函数/</id>
    <published>2016-02-19T03:36:15.000Z</published>
    <updated>2016-02-22T04:03:11.870Z</updated>
    <content type="html"><![CDATA[<h1 id="u533F_u540D_u51FD_u6570"><a href="#u533F_u540D_u51FD_u6570" class="headerlink" title="匿名函数"></a>匿名函数</h1><p>Anonymous functions典型地用于那些不需要函数名称以备再次引用它们。</p>
<h2 id="u521B_u5EFA_u5BF9_u8C61_u65F6_u7684_u533F_u540D_u51FD_u6570"><a href="#u521B_u5EFA_u5BF9_u8C61_u65F6_u7684_u533F_u540D_u51FD_u6570" class="headerlink" title="创建对象时的匿名函数"></a>创建对象时的匿名函数</h2><p>匿名函数可被分配给对象的属性，通过dot (.)操作符调用这个函数。 看下面的例程：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> santa = &#123;</span><br><span class="line">	say :<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"ho ho ho"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line">santa.say();</span><br></pre></td></tr></table></figure></p>
<p>上例中，创建了一个对象，这个对象有一个名为<strong>say</strong>的属性，这是一个匿名函数。在这种情况下，这个属性被认为是一个方法而不是一个函数。不需要命名函数，因为可以通过对象属性来调用。这是一种常用的方式。</p>
<h2 id="u521B_u5EFA_u5217_u8868_u65F6_u7684_u533F_u540D_u51FD_u6570"><a href="#u521B_u5EFA_u5217_u8868_u65F6_u7684_u533F_u540D_u51FD_u6570" class="headerlink" title="创建列表时的匿名函数"></a>创建列表时的匿名函数</h2><p>现在要创建两个匿名函数，将其加入到一个数组中。接着，循环遍历数组并执行对应的函数:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> things = [</span><br><span class="line">	<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">"ThingOne"</span>) &#125;,</span><br><span class="line">	<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(<span class="string">"ThingTwo"</span>) &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x=<span class="number">0</span>; x&lt;things.length; x++) &#123;</span><br><span class="line">	things[x]();</span><br><span class="line">&#125; </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="u4F5C_u4E3A_u53E6_u4E00_u4E2A_u51FD_u6570_u7684_u5F62_u53C2_u7684_u533F_u540D_u51FD_u6570"><a href="#u4F5C_u4E3A_u53E6_u4E00_u4E2A_u51FD_u6570_u7684_u5F62_u53C2_u7684_u533F_u540D_u51FD_u6570" class="headerlink" title="作为另一个函数的形参的匿名函数"></a>作为另一个函数的形参的匿名函数</h2><p>这也是常用模式之一，在大多数专业库中可以见到：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function statement</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventHandler</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">	event();</span><br><span class="line">&#125;</span><br><span class="line">eventHandler(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//do a lot of event related things</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Event fired"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这里将一个匿名函数传递给另一个函数。在接收函数中，执行作为参数传递过来的匿名函数。在创建单次使用函数如对象的方法或事件句柄时非常方便。匿名函数语法比函数声明后再调用这样的两步方式更精简。</p>
<h2 id="u5728_u6761_u4EF6_u903B_u8F91_u4E2D_u7684_u51FD_u6570"><a href="#u5728_u6761_u4EF6_u903B_u8F91_u4E2D_u7684_u51FD_u6570" class="headerlink" title="在条件逻辑中的函数"></a>在条件逻辑中的函数</h2><p>可以使用匿名函数表达式以根据条件改变其行为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shape;</span><br><span class="line"><span class="keyword">if</span>(shape_name === <span class="string">"SQUARE"</span>) &#123;</span><br><span class="line">	shape = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"drawing square"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	shape = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"drawing square"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line">alert(shape());</span><br></pre></td></tr></table></figure></p>
<p>这里，根据条件判断，赋与<strong>shape</strong>以不同的实现。这种模式如果小心使用帮助很大。但过度使用会导致不可读和难以调试的代码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u533F_u540D_u51FD_u6570"><a href="#u533F_u540D_u51FD_u6570" class="headerlink" title="匿名函数"></a>匿名函数</h1><p>Anonymous functions典型地用于]]>
    </summary>
    
      <category term="Function" scheme="http://yoursite.com/tags/Function/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scoping 作用域]]></title>
    <link href="http://yoursite.com/2016/02/19/Scoping-%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2016/02/19/Scoping-作用域/</id>
    <published>2016-02-19T02:31:50.000Z</published>
    <updated>2016-03-23T02:29:34.521Z</updated>
    <content type="html"><![CDATA[<h1 id="Scoping__u4F5C_u7528_u57DF"><a href="#Scoping__u4F5C_u7528_u57DF" class="headerlink" title="Scoping 作用域"></a>Scoping 作用域</h1><p>在javascripts中，scope 定义为代码当前的执行环境（the current context of code）。<br>变量的scope是该变量存在的环境。scope指定从哪里可以访问该变量。每个执行环境都有一个与之关联的<em>变量对象（variable object）</em>,<br>执行环境中定义的所有变量和函数都保存在这个对象中。编写的代码无法直接访问这个对象，但解析器在后台处理数据时使用它。某个执行环境中的所有代码执行完毕后，<br>该环境被销毁，保存在其中的所有变量和函数定义随之销毁。全局执行环境在应用程序退出时被销毁，如关闭网页或浏览器。</p>
<h2 id="Global_Scope__u5168_u5C40_u4F5C_u7528_u57DF"><a href="#Global_Scope__u5168_u5C40_u4F5C_u7528_u57DF" class="headerlink" title="Global Scope 全局作用域"></a>Global Scope 全局作用域</h2><p>全局执行环境是最外围的一个执行环境。在WEB浏览器中，全局执行环境被认为是<code>window</code>对象。任何声明的变量默认其作用域为全局。全局变量对所有其他作用域可见。<br>全局变量使得在同一程序或模块中，运行松耦合的各子程序变得困难。如果子程序碰巧与全局都有同一个变量名，相互之间会产生干扰，难以调试错误。这就是所说的命名空间碰撞。</p>
<h2 id="Local_Scope__u672C_u5730_u4F5C_u7528_u57DF"><a href="#Local_Scope__u672C_u5730_u4F5C_u7528_u57DF" class="headerlink" title="Local Scope 本地作用域"></a>Local Scope 本地作用域</h2><p>Javascripts不像其他语言那样有区块级作用域（由花括号划分的代码区块）；但javascrips有函数级作用域。在函数中声明的变量为本地作用域变量，只能在函数中访问，或者是由该函数内部的函数访问。<br>每个函数在被调用时都会创建自己的执行环境。当执行流进入一个函数时，函数的执行环境就会被推入一个环境栈中。而在函数执行后，栈将其环境弹出，把控制权返回给之前的执行环境。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope_name = <span class="string">"Global"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showScopeName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// local variable; only accessible in this function</span></span><br><span class="line"><span class="keyword">var</span> scope_name = <span class="string">"Local"</span>;</span><br><span class="line"><span class="built_in">console</span>.log (scope_name); <span class="comment">// Local</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log (scope_name); <span class="comment">//prints -Global</span></span><br><span class="line">showScopeName(); <span class="comment">//prints – Local</span></span><br></pre></td></tr></table></figure></p>
<h2 id="u51FD_u6570_u7EA7scope__u4E0E__u533A_u5757_u7EA7scope__u5BF9_u6BD4"><a href="#u51FD_u6570_u7EA7scope__u4E0E__u533A_u5757_u7EA7scope__u5BF9_u6BD4" class="headerlink" title="函数级scope 与 区块级scope 对比"></a>函数级scope 与 区块级scope 对比</h2><p>JavaScript 变量由函数划分作用域。可将其想像为不断生成的小气泡，以防止气泡外部看见内部。函数为其内部声明的变量生成这样的气泡。 大概的情形如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-GLOBAL SCOPE---------------------------------------------|</span><br><span class="line"><span class="keyword">var</span> g =<span class="number">0</span>; 												  |</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123; -----------------------|                |</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;                               |                |</span><br><span class="line"><span class="comment">//code 									 | 				  |</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123; ------|				 |				  |</span><br><span class="line"><span class="comment">// ... 				   |ScopeBar 		 |ScopeFoo 		  |</span></span><br><span class="line">&#125; 				 ------| 				 |				  |</span><br><span class="line"><span class="comment">// code									 |				  |</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">2</span>; 								 |				  |</span><br><span class="line">&#125;----------------------------------------|				  |</span><br><span class="line">foo(); <span class="comment">//WORKS 											  |</span></span><br><span class="line">bar(); <span class="comment">//FAILS                                            |</span></span><br><span class="line">----------------------------------------------------------|</span><br></pre></td></tr></table></figure></p>
<p>JavaScript 使用<em>作用域链</em>（scope chains）为给定的函数建立作用域。 作用域链的排第一位的始终是当前执行代码所在执行环境的变量对象。如果这个执行环境是一个函数，则将其<em>活动对象(activation object）</em>作为变量对象典型地有一个全局域，每个定义的函数有它自已的嵌套域。任何在其他函数内部定义的内部函数，其作用域链接到它的外部函数。 <em>原始位置</em> 定义作用域。当解析变量时，JavaScript由最内层开始，逐步向外，一级一级地搜索标识符。 </p>
<p>在上面的例程中，<strong>foo()</strong>函数在全局域中定义,<strong>foo()</strong>函数有自已的本地域，它也可以访问全局变量<strong>g</strong>.  <strong>a</strong>，<strong>b</strong>,<strong>c</strong>三个变量在本地域中可以访问。<strong>bar()</strong>函数与三个变量的作用域一样，当<strong>foo()</strong>函数返回后，不再可以被调用（在<strong>foo()</strong>函数的气泡之外是不可见的）。</p>
<p><strong>bar()</strong>函数拥有自已的函数域, 它可以访问<strong>foo()</strong>函数及所有在<strong>foo()</strong>函数域（它的父域）中创建的变量-<strong>a</strong>，<strong>b</strong>,<strong>c</strong>。<strong>bar()</strong>函数也可以访问全局变量，<strong>g</strong>.</p>
<p>因此，如果将任意一部分代码打包在函数内，就可以隐藏和创建这部分代码的一个作用域（气泡）。通过<strong>函数打包代码方式创建作用域</strong>可以帮助创建正确的代码，避免难以调试的bugs。函数作用域和在期中隐藏变量和函数的另一个优点是，避免两个标识符的冲突。下面是一个坏例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">		i = <span class="number">2</span>; <span class="comment">// changing the 'i' in the enclosing scope's for-loop</span></span><br><span class="line">		<span class="built_in">console</span>.log(a+i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">		bar(i); <span class="comment">// infinite loop</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p>
<p>在<strong>bar()</strong>函数中，无意中修改了 <strong>i=2</strong>. 当在<strong>for</strong>循环中调用<strong>bar()</strong> 时，变量<strong>i</strong> 的值被设为2，形成死循环。 这是命名空间冲突的一个坏例子。</p>
<p>目前为止，在Javascript中使用函数作用域以实现模块化和正确性，听起来是一个不错的方式. 尽管这种方式可行，但并不真得很理想。第一个问题，必须创建一个命名函数。如果一直这样创建函数以引入函数作用域，全局作用域或父作用域会充满这样的代码。此外，还需要调用这样的函数。这会引入很多样板，随着时间推移代码会越来越难读:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//Lets introduce a function -scope</span></span><br><span class="line"><span class="comment">//1. Add a named function foo() into the global scope</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2. Now call the named function foo()</span></span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p>
<p>通过创建函数<strong>foo()</strong>引入了函数域，紧跟着在后面调用函数执行代码。在JavaScript中, 通过创建立即执行的函数可以解决上述两个问题。仔细研究下面这个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//Lets introduce a function -scope</span></span><br><span class="line"><span class="comment">//1. Add a named function foo() into the global scope</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">&#125;)(); <span class="comment">//&lt;---this function executes immediately</span></span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p>
<p><strong>(function foo(){ })</strong>这种表达方式的意思是将<strong>foo()</strong>函数作为函数表达式，而不是作为一个函数声明。标识符<strong>foo</strong>只在<strong>foo()</strong>函数作用域内存在，外部不可见。将<strong>foo</strong>隐藏在其自身内部，避免对所在作用域产生干扰。在函数表达式后加<strong>()</strong>，指示函数立即执行。完整的模式如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;)();</span><br></pre></td></tr></table></figure></p>
<p>这种模式有一通用的名字：<strong>IIFE</strong>, 即<strong>Immediately Invoked Function Expression</strong>. 很多程序员在使用IIFE时省略函数名。由于IIFE的主要作用是引入函数域，命名函数并不是必要的。前面的例子也可以变成如下形式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">console</span>.log( a ); <span class="comment">// 2</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log( a ); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p>
<p>上面是IIFE的匿名函数形式，与前面的命名函数形式功能一样, 但匿名IIFE函数有一些缺点：</p>
<ul>
<li>在堆栈中找不到函数名，难以调试。</li>
<li>不能使用递归调用</li>
<li>过度使用匿名IIFEs有时会导致代码难以阅读<br>Douglas Crockford 和其他一些专家建议使用如下变化的IIFE:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;());</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>两种形式都很常见。同时可以给IIFEs传递参数. 下面的例子演示了如何传递参数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">console</span>.log( a + b );</span><br><span class="line">&#125;)(<span class="number">3</span>); <span class="comment">//prints 5</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Inline_function_expressions"><a href="#Inline_function_expressions" class="headerlink" title="Inline function expressions"></a>Inline function expressions</h2><p>内联函数表达式是另一种常见用法，即将函数作为参数传递给另一个函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setActiveTab</span>(<span class="params">activeTabHandler, tab</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//set active tab</span></span><br><span class="line">	<span class="comment">//call handler</span></span><br><span class="line">	activeTabHandler();</span><br><span class="line">&#125;</span><br><span class="line">setActiveTab( <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log( <span class="string">"Setting active tab"</span> );</span><br><span class="line">&#125;, <span class="number">1</span> );</span><br><span class="line"><span class="comment">//prints "Setting active tab"</span></span><br></pre></td></tr></table></figure></p>
<p>同样，可以命名内联函数以保证在调试代码时可以跟踪堆栈。</p>
<h2 id="Block_scopes"><a href="#Block_scopes" class="headerlink" title="Block scopes"></a>Block scopes</h2><p>与C和Java不同，Javascript中没有块作用域这个概念。<strong>ECMAScript 6 (ES6) </strong>引入了<strong>let</strong>关键字，以引入传统的块作用域. 如果环境支持ES6, 就可以使用<strong>let</strong>关键字：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">	<span class="keyword">let</span> bar = <span class="number">42</span>; <span class="comment">//variable bar is local in this block &#123; &#125;</span></span><br><span class="line">	<span class="built_in">console</span>.log( bar );</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log( bar ); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></p>
<p>通常代码是以自上而下的方式一行接一行顺序执行的，大部分的JavaScript代码也一样，但有部分例外：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码 1-a</span></span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p>
<p>显然上面的代码无效，结果会是在调用console.log()出错，a是<strong>undefined</strong>。下面的代码输出是什么呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码 1- b</span></span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br></pre></td></tr></table></figure></p>
<p>理所当然地预期输出为<strong>undefined</strong>, 因为<strong>var a</strong>在<strong>a = 1</strong>之后, 好像变量<strong>a</strong>被重新定义并被赋值为默认的初始值<strong>undefined</strong>. 但实际输出是<strong>1</strong>.</p>
<p>当看到<strong>var a = 1</strong>时, JavaScript将其拆分为两个表达式:<strong>var a</strong> 和<strong>a = 1</strong>. 第一个变量声明表达式在编译阶段处理。第二个赋值表达式在执行阶段处理。因此前面的代码(1b)实际执行过程如下(1c)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码 1- c 对应 1 - b</span></span><br><span class="line"><span class="keyword">var</span> a; <span class="comment">//----Compilation phase</span></span><br><span class="line">a = <span class="number">1</span>; <span class="comment">//------execution phase</span></span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br></pre></td></tr></table></figure></p>
<p>The first snippet is actually executed as follows:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码 1- d 对应 1 - a</span></span><br><span class="line"><span class="keyword">var</span> a; <span class="comment">//-----Compilation phase</span></span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line">a = <span class="number">1</span>; <span class="comment">//------execution phase</span></span><br></pre></td></tr></table></figure></p>
<p>可见，变量和函数声明在编译阶段被移动到最前面，这一过程被熟称为hoisting. 重要的是要记住只有声明本身被提升，任何赋值或其他可执行逻辑不动。下面的代码演示了函数声明如何提升：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>函数<strong>foo()</strong>的声明被提升，因此可以在被定义前就被调用。提升在每个作用域内生效。在<strong>foo()</strong>函数内，变量的声明被提升到函数顶部，而不是程序顶部。伴随的提升的<strong>foo()</strong>函数实际执行顺序如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a;</span><br><span class="line">	<span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">	a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>函数声明被提升，但函数表达式不会。</p>
<h2 id="Function_declarations__u4E0E_function_expressions_u5BF9_u6BD4"><a href="#Function_declarations__u4E0E_function_expressions_u5BF9_u6BD4" class="headerlink" title="Function declarations 与 function expressions对比"></a>Function declarations 与 function expressions对比</h2><p>这两种定义方式目的一致，但有所区别。检视下面的例程：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function expression</span></span><br><span class="line">functionOne();</span><br><span class="line"><span class="comment">//Error</span></span><br><span class="line"><span class="comment">//"TypeError: functionOne is not a function</span></span><br><span class="line"><span class="keyword">var</span> functionOne = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"functionOne"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Function declaration</span></span><br><span class="line">functionTwo();</span><br><span class="line"><span class="comment">//No error</span></span><br><span class="line"><span class="comment">//Prints - functionTwo</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionTwo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"functionTwo"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>函数声明在其出现时被处理，这发生在任何step-by-step代码被执行之前。这个被创建的函数被正式命名(上面代码中的<strong>functionTwo()</strong>) ，这个函数名被放置在声明出现的作用域中。因为是在同一环境下的任何代码被执行前处理，在定义前调用<strong>functionTwo() </strong>不会发生错误。但<strong>functionOne()</strong>是一个匿名函数表达式， 在代码的step-by-step执行过程中当前进到这里时才被评估(也被称为runtime execution); 必须在调用之前声明它。本质上，函数<strong>functionTwo()</strong>的声明被提升，而<strong>functionOne()</strong>的表达式在到达它时被执行。</p>
<p><em>注意：函数与变量的声明都被提升，但函数在前，变量在后。</em></p>
<p>永远不要在条件判断情况下进行函数声明。这种方式不标准，在不同平台的表现也不一样。下面的例程演示了在条件判断下进行函数声明，尝试定义<strong>sayMoo()</strong>函数的不同函数体。该代码不能保证在所有浏览器上正常运行，结果不可预期:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Never do this - different browsers will behave differently</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sayMoo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'trueMoo'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sayMoo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'falseMoo'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p>
<p>但对函数表达式做同样的事是安全的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sayMoo;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">	sayMoo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'trueMoo'</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">	sayMoo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'falseMoo'</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125; </span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p>
<p>函数声明只允许在程序或函数体中出现。但不能在块(<strong>{ … }</strong>)中出现. 块只能包含陈述而不是声明。基于此，几乎所有的JavaScript实现对此表现都不一样。 在条件执行块中永远不要进行函数声明。<br>另一方面，函数表达式在条件块中的应用很常见。Javascrip中的一种常见模式是基于某个条件来 fork 函数定义. 这样的 forks 通常在同一个作用域中出现，因此几乎总是使用函数表达式。</p>
<h2 id="arguments_u53C2_u6570"><a href="#arguments_u53C2_u6570" class="headerlink" title="arguments参数"></a><strong>arguments</strong>参数</h2><p><strong>arguments</strong>参数就是传递给函数的所有实参的一个集合。集合有一个名为length的属性，包含实参个数，单个的实参值通过数组索引获取。 <strong>arguments</strong>参数其实不是JavaScript数组，如果对其使用数组方法，肯定会出错。 可将其看成是类似数组的结构。这样就可创建不确定形参个数的函数。下面的例程演示了如何传递可变数量的实参给函数，并进行枚举：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> i, total = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">		total += <span class="built_in">arguments</span>[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>)); <span class="comment">// prints 45</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)); <span class="comment">// prints 15</span></span><br></pre></td></tr></table></figure></p>
<p>虽然<strong>arguments</strong>参数不是一个真的数组，但可以转换为数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure></p>
<p>转换后，就可以按数组进行处理。</p>
<h2 id="this_u53C2_u6570"><a href="#this_u53C2_u6570" class="headerlink" title="this参数"></a><strong>this</strong>参数</h2><p>当调用函数时，除了在调用时提供的明显的实参参数，一个名为<strong>this</strong>的隐形参数也被传递给函数。它指向一个与函数调用关联的隐形对象, 术语为a function context函数上下文环境. 与Java类似，这个关键字指向一个类实例，该方法在这个类实例中定义。<br>下面讨论函数的调用方式。</p>
<h2 id="u4F5C_u4E3A_u51FD_u6570_u8C03_u7528"><a href="#u4F5C_u4E3A_u51FD_u6570_u8C03_u7528" class="headerlink" title="作为函数调用"></a>作为函数调用</h2><p>如果函数不是作为method, constructor, 或通过apply() 、call()调用，那就是作为函数调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">add();</span><br><span class="line"><span class="keyword">var</span> substract = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">substract();</span><br></pre></td></tr></table></figure></p>
<p>当函数以这种方式调用时，<strong>this</strong>绑定到<strong>global object</strong>。许多专家认为这是一个糟糕的设计。自然的想法是将<strong>this</strong>绑定到父上下文环境。</p>
<h2 id="u4F5C_u4E3A_u65B9_u6CD5_u8C03_u7528"><a href="#u4F5C_u4E3A_u65B9_u6CD5_u8C03_u7528" class="headerlink" title="作为方法调用"></a>作为方法调用</h2><p>一个方法<strong>method</strong>是关联到一个对象上的属性函数。对于方法调用，<strong>this</strong>绑定调用的对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">	name: <span class="string">'Albert Einstein'</span>,</span><br><span class="line">	age: <span class="number">66</span>,</span><br><span class="line">	greet: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.greet();</span><br></pre></td></tr></table></figure></p>
<p>在上例中，在调用<strong>greet</strong>时，<strong>this</strong>被绑定到<strong>person</strong>对象。对比一下两种方式：<br><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>This test<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">		<span class="comment">//----------note begin ------------</span></span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">testF</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</span><br><span class="line">		<span class="built_in">console</span>.log(testF());</span><br><span class="line">		<span class="keyword">var</span> testFCopy = testF;</span><br><span class="line">		<span class="built_in">console</span>.log(testFCopy());</span><br><span class="line">		<span class="keyword">var</span> testObj = &#123;</span><br><span class="line">			testObjFunc: testF</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="built_in">console</span>.log(testObj.testObjFunc ());</span><br><span class="line">		<span class="comment">//---------note end---------------</span></span><br><span class="line">	</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>在Firebug中，可以看到如下输出：<br><img src="/img/1455793541898.png" alt="this指向"></p>
<p>前两次是作为函数调用，因此<strong>this</strong>参数指向全局环境（即<strong>Window</strong>）.<br>最后一次是作为方法调用，变量<strong>testObj</strong>是一个对象，有一个属性，名为<strong>testObjFunc</strong>，是指向<strong>testF()</strong>函数的引用。这样就创建了<strong>testObjFunc()</strong>方法。当调用这个方法时，<strong>this</strong>就会代表函数的上下文环境。</p>
<h2 id="u4F5C_u4E3A_u6784_u9020_u51FD_u6570_u8C03_u7528"><a href="#u4F5C_u4E3A_u6784_u9020_u51FD_u6570_u8C03_u7528" class="headerlink" title="作为构造函数调用"></a>作为构造函数调用</h2><p>Constructor函数像其它函数一样声明，函数被当成构造函数使用时也没有什么不同。但调用的方式完全不同。</p>
<p>作为构造函数调用时，要在前面加上<strong>new</strong>关键字。这时，<strong>this</strong>被绑定到新的对象上。</p>
<p>JavaScript是原型继承语言。 对象可以直接从其他对象继承属性. 语言是无类的。函数被设计为通过<strong>new</strong>调用的被称为构造函数。通常，以PascalCase命名以容易区别于CamelCase. 在下面的例程中，注意<strong>greet</strong>函数使用<strong>this</strong>访问命名属性。<strong>this</strong>参数被绑定到<strong>Person</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">Person.prototype.greet = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> albert = <span class="keyword">new</span> Person(<span class="string">'Albert Einstein'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(albert.greet());</span><br></pre></td></tr></table></figure></p>
<h2 id="u4F7F_u7528apply_28_29_u548Ccall_28_29_u65B9_u6CD5"><a href="#u4F7F_u7528apply_28_29_u548Ccall_28_29_u65B9_u6CD5" class="headerlink" title="使用apply()和call()方法"></a>使用apply()和call()方法</h2><p>JavaScript的函数都是对象。与其他对象一样，函数也有固定的methods. 当使用函数的<strong>apply()</strong> method调用函数时, 需要传递两个参数给<strong>apply()</strong>: 作为函数上下文环境的对象和作为调用实参的值数组。<strong>call()</strong> method的使用方式类似，除了实参是直接以列表形式传递而不是作为数组。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Scoping__u4F5C_u7528_u57DF"><a href="#Scoping__u4F5C_u7528_u57DF" class="headerlink" title="Scoping 作用域"></a>Scoping 作用域</h1><p>在jav]]>
    </summary>
    
      <category term="Function" scheme="http://yoursite.com/tags/Function/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Scope" scheme="http://yoursite.com/tags/Scope/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[testcode]]></title>
    <link href="http://yoursite.com/2016/02/06/testcode/"/>
    <id>http://yoursite.com/2016/02/06/testcode/</id>
    <published>2016-02-06T09:45:59.000Z</published>
    <updated>2016-02-06T10:01:34.772Z</updated>
    <content type="html"><![CDATA[<p>ffdgadsfg<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">title</span>&gt;</span>Blinking Text in TextBox using Javascript<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">language</span>=<span class="value">"javascript"</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line"><span class="keyword">var</span> timer;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BlinkingText</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">document</span>.getElementById(<span class="string">"txtName"</span>).value == <span class="string">""</span>)</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="built_in">document</span>.getElementById(<span class="string">"txtName"</span>).value = <span class="string">"Enter your name.."</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="built_in">document</span>.getElementById(<span class="string">"txtName"</span>).value = <span class="string">""</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> timer = setTimeout(<span class="string">"BlinkingText()"</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">StopBlinking</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">  clearTimeout(timer);</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ffdgadsfg<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2016/02/04/hello-world/"/>
    <id>http://yoursite.com/2016/02/04/hello-world/</id>
    <published>2016-02-04T12:45:17.918Z</published>
    <updated>2016-02-01T10:06:57.602Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start"><a href="#Quick_Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create_a_new_post"><a href="#Create_a_new_post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server"><a href="#Run_server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files"><a href="#Generate_static_files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites"><a href="#Deploy_to_remote_sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[thread]]></title>
    <link href="http://yoursite.com/2016/02/04/thread/"/>
    <id>http://yoursite.com/2016/02/04/thread/</id>
    <published>2016-02-04T12:44:48.000Z</published>
    <updated>2016-02-04T12:44:48.076Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
</feed>
